[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "[![Java CI](https://github.com/AY2021S1-CS2103T-F13-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "\u003cimg src \u003d \"https://github.com/AY2021S1-CS2103T-F13-4/tp/blob/master/docs/images/Logo.png\" width \u003d 700\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "# SimplyKitchen"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "With SimplyKitchen, food inventory management is made easy."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "## About"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "SimplyKitchen is a desktop app for food inventory management, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SimplyKitchen can get your food management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "## User Interface"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "![alt text](https://github.com/AY2021S1-CS2103T-F13-4/tp/blob/master/docs/images/Ui.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 2,
      "bchenghi": 13
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "mainClassName \u003d \u0027seedu.simplykitchen.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    archiveName \u003d \u0027SimplyKitchen.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 5,
      "rolandyuwy": 1,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "#About Us"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "SimplyKitchen was developed by CS2103-F13-4 team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "We are a team of Year 2 Computer Science undergraduates based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "### Roland Yu"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003cimg src\u003d\"images/rolandyuwy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "[[github](http://github.com/rolandyuwy)] [[portfolio](team/rolandyuwy.md)]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Scheduling and Tracking: Responsible for defining, assignment, and tracking all project tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Deliverables and Deadlines: Responsible for the project deliverables. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "### Ang Song Yi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "\u003cimg src\u003d\"images/songyi98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "[[github](http://github.com/SONGYI98)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "[[portfolio](team/songyi.md)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Documentation - Responsible for the quality of all project documents."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "### Boh Cheng Hin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003cimg src\u003d\"images/bchenghi.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "[[github](http://github.com/bchenghi)] [[portfolio](team/bchenghi.md)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Documentation - Responsible for the quality of all project documents. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Testing - Responsible for proper testing completed on time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Integration - Responsible for versioning of the code, maintaining the code repository and integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "### Jonah Tan"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "\u003cimg src\u003d\"images/jonahtanjz.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "[[github](http://github.com/jonahtanjz)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "[[portfolio](team/jonahtanjz.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Testing: Responsible for proper testing "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Integration: Responsible for versioning of the code, maintaining the code repository and integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "### Sagar Sureka"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003cimg src\u003d\"images/sagarsureka.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "[[github](http://github.com/sagarsureka)]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "[[portfolio](team/sagarsureka.md)]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Code Quality: Responsible for ensuring all code adheres to coding standards."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Integration: Responsible for versioning of the code, maintaining the code repository and integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 4,
      "jonahtanjz": 4,
      "rolandyuwy": 30,
      "-": 34
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a food item)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "## **Implementation** [to be updated]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* has a need to manage kitchen food items"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "**Value proposition**: With SimplyKitchen, food inventory management is made easy."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **GUI**: Graphical User Interface"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **food inventory**: a complete list of food items stored in Simply Kitchen"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| Priority | User role (As a …)                        | Function (I want to …)                                     | Benefit (So that I can …)                                    |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| -------- | ----------------------------------------- | ---------------------------------------------------------  | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| `* * *`  | user                                      | add food items                                             |                                                              |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| `* * *`  | user                                      | delete food items                                          |                                                              |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| `* * *`  | user                                      | edit the fields of the food items                          | I can change the details of the food item after adding it    |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| `* * *`  | user                                      | search for food items based on keywords of the description | I can find them easily                                       |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| `* * *`  | user                                      | view a list of all food items I have added                 | I have a complete display of all my food items               |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| `* * *`  | user                                      | clear all food items                                       |                                                              |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| `* * *`  | user who cares about some food items more | have different priority for different food items           | I can prioritise some food items                             |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "| `* `     | user                                      | tag food items                                             | I can add additional information pertaining/relating to them |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "For all use cases, the **System** is `SimplyKitchen` and the **Actor** is the `User`, unless otherwise specified."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "#### UC01: Add a food item"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Guarantees:** The food item is added into the food inventory."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**1.**  User requests to add a food item."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**2.**  SimplyKitchen adds the food item to the food inventory and displays a success message."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**1a.** SimplyKitchen detects an error in the user\u0027s food item."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "   "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **1a1.** SimplyKitchen displays an error message and prompts the user to enter a correct food item."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **1a2.** User enters another food item."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "      "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Steps **1a1.** - **1a2.** are repeated until the food item entered is correct."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Use case resumes from step **2**."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": " "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "#### UC02: Delete a food item"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Precondition:** The food item to be deleted is currently in the food inventory."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Guarantees:** If a food item is specified, the food item will be deleted from the food inventory."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**1.** User requests to \u003cins\u003efind a food item (UC03)\u003c/ins\u003e or \u003cins\u003elist all food items (UC04)\u003c/ins\u003e."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**2.** SimplyKitchen displays a list of food items."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**3.** User requests to delete a food item from the list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**4.** SimplyKitchen deletes the food item from the food inventory and displays a success message."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**2a.** The list is empty."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**3a.** SimplyKitchen detects an invalid index corresponding to the food item in the list."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **3a1.** SimplyKitchen displays an error message and prompts the user to enter a correct index."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **3a2.** User requests to delete another index corresponding to the food item in the list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "      "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Steps **3a1.** - **3a2.** are repeated until the index entered is correct."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Use case resumes from step **4**."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "#### UC03: Edit a food item"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Precondition:** The food item to be edited is currently in the food inventory."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Guarantees:** The food item is edited from the food inventory."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**1.** User requests to \u003cins\u003efind a food item (UC03)\u003c/ins\u003e or \u003cins\u003elist all food items (UC04)\u003c/ins\u003e."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**2.** SimplyKitchen displays a list of food items."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**3.** User requests to edit a food item from the list."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**4.** SimplyKitchen edits the food item in the food inventory and displays a success message."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**2a.** The list is empty."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**3a.** SimplyKitchen detects an invalid index corresponding to the food item in the list."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **3a1.** SimplyKitchen displays an error message and prompts the user to enter a correct index."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **3a2.** User requests to edit another food item in the list."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "      "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Steps **3a1.** - **3a2.** are repeated until the index entered is correct."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Use case resumes from step **4**."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**3a.** SimplyKitchen detects an error in the user\u0027s edited food item."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **3a1.** SimplyKitchen displays an error message and prompts the user to enter a correct edited food item."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **3a2.** User enters another edited food item."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Steps **3a1.** - **3a2.** are repeated until the edited food item entered is correct."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Use case resumes from step **4**."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "#### UC04: Find a food item"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Guarantees:**  All food items in the food inventory that match the query are listed."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**1.** User requests to list food items according to the description, priority, expiration date and/or tag."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**2.** SimplyKitchen displays all food items matching the search query."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**1a.** SimplyKitchen detects an error in the search query. "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **1a1.** SimplyKitchen displays an error message and prompts the user to enter a correct search query."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * **1a2.** User enters a new search query."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "      "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Steps **1a1.** - **1a2.** are repeated until the search query entered is correct."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "   Use case resumes from step **2**."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "#### UC05: List all food items"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Guarantees:**  All food items in the food inventory are listed."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**1.** User requests to list all food items in the food inventory."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**2.** SimplyKitchen displays all food items in the food inventory."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "#### UC06: Clear all food items"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**Guarantees:**  All food items in the food inventory are cleared."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**1.** User requests to clear all food items in the food inventory."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**2.** SimplyKitchen removes all food items in the food inventory and displays a success message."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* The app should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* The app should be able to hold up to 1000 food items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* A user should be able to see food items clearly on the GUI to facilitate command typing."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "### Deleting a food item"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "1. Deleting a food item while all food items are being shown"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "   1. Prerequisites: List all food items using the `list` command. Multiple food items in the list."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "      Expected: No food item is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 126,
      "jonahtanjz": 34,
      "rolandyuwy": 8,
      "-": 327
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "   1. Run the `seedu.simplykitchen.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "   e.g. `seedu.simplykitchen.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "   e.g. `seedu.simplykitchen.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "   e.g. `seedu.simplykitchen.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "SimplyKitchen is a desktop app for food inventory management, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SimplyKitchen can get your food management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "Table of Contents:\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* [Quick start](https://github.com/AY2021S1-CS2103T-F13-4/tp/blob/master/docs/UserGuide.md#quick-start-coming-soon)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* [Features](https://github.com/AY2021S1-CS2103T-F13-4/tp/blob/master/docs/UserGuide.md#features)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* [FAQs](https://github.com/AY2021S1-CS2103T-F13-4/tp/blob/master/docs/UserGuide.md#faq)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* [Command Summary](https://github.com/AY2021S1-CS2103T-F13-4/tp/blob/master/docs/UserGuide.md#command-summary)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "## Quick start [coming soon]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  e.g. in `add d/DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `add d/cucumber`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  e.g `d/DESCRIPTION e/EXPIRY_DATE [p/PRIORITY]` can be used as `d/bread e/30-09-2020 p/low` or as `d/bread e/30-09-2020`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  e.g. if the command specifies `d/DESCRIPTION e/EXPIRY_DATE`, `e/EXPIRY_DATE d/DESCRIPTION` is also acceptable."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "Shows a help message explaining how to access the help page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "### Adding a food item: `add`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "Adds a food item to the food inventory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "Format: `add d/DESCRIPTION e/EXPIRY_DATE [p/PRIORITY] [t/TAG]…​`  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Adds a food item based on its description and expiry date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Description and expiry date fields are compulsory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* The priority field can be either `high`, `medium` or `low`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* The priority field is optional. If not specified the default priority is set to `low`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* For `e/EXPIRY_DATE`, the field only accepts a date in the format of `DD-mm-yyyy`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* The tag field accepts `alphanumeric`, `whitespaces` and these special characters: `#$%\u0026-()`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* Tags with only whitespace(s) will not be allowed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* A food item can have any number of tags (including 0)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* `add d/canned tuna e/01-01-2021 p/low`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* `add d/apple pie e/11-10-2020 p/medium t/frozen t/$15 t/contains nuts`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "### Listing all food items : `list`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "Shows a list of all food items in the food inventory."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "### Searching for a food item: `find`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "Searches for food items in the inventory with descriptions matching any of the given keywords."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* The search is case-insensitive. e.g `fish` will match `Fish`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* The order of the keywords does not matter. e.g. `Cake Fish` will match `Fish Cake`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* Only full words will be matched e.g. `fis` will not match `fish`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* Food items matching at least one keyword will be returned (i.e `OR` search). e.g. `fish` will return `Fish Cake`, `Tuna Fish`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* `find chocolate` returns `Chocolate Pie` and `Chocolate Cake`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* `find apple tuna` returns `Apple Pie` and `Tuna Can`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  ![result for \u0027find apple tuna\u0027](images/findAppleTunaResult.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "### Deleting a food item : `delete`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "Deletes the specified food item from the food inventory."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* Deletes the food item at the specified `INDEX`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* The index refers to the index number shown in the displayed food item list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd food item in the food inventory."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* `find tuna` followed by `delete 1` deletes the 1st food item in the results of the `find` command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "### Editing a food item : `edit`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "Edits the details of an existing food item in the food inventory."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "Format: `edit INDEX [d/DESCRIPTION] [p/PRIORITY] [e/EXPIRY DATE] [t/TAG]...`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Edits the food item at the specified `INDEX`. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* The index refers to the index number shown in the displayed food item list. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* When editing tags, the existing tags of the food item will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* You can remove all the tags of a food item by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* `edit 1 d/baked beans e/1-1-2020` Edits the food description and expiry date of the 1st food item to be `baked beans` and `1-1-2020` respectively."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* `edit 2 d/canned tuna t/` Edits the food description of the 2nd food item to be `canned tuna` and clears all existing tags."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "### Clearing all entries : `clear` "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "Clears all entries from the food inventory."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "Food Inventory data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous SimplyKitchen home folder."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "**Add** | `add d/DESCRIPTION e/EXPIRY_DATE [p/PRIORITY] [t/TAG]…` \u003cbr\u003e e.g., `add d/cereal e/31-10-2020 p/medium t/corn flakes`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "**Edit** | `edit INDEX [d/DESCRIPTION] [p/PRIORITY] [e/EXPIRY DATE] [t/TAG]…​` \u003cbr\u003e e.g., `edit 1 d/baked beans e/1-1-2020`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find apple tuna`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 14,
      "SONGYI98": 1,
      "jonahtanjz": 9,
      "rolandyuwy": 19,
      "-": 93,
      "bchenghi": 18
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "title: SimplyKitchen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "[![Java CI](https://github.com/AY2021S1-CS2103T-F13-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F13-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F13-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "**SimplyKitchen is a desktop app for food inventory management.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* If you are interested in using SimplyKitchen, head over to the [_Quick Start_ section of the **User Guide**](https://ay2021s1-cs2103t-f13-4.github.io/tp/UserGuide.html#quick-start-coming-soon)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* If you are interested about developing SimplyKitchen, the [**Developer Guide**](https://ay2021s1-cs2103t-f13-4.github.io/tp/DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/bchenghi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "title: Boh Cheng Hin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "bchenghi": 46
    }
  },
  {
    "path": "docs/team/jonahtanjz.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "title: Jonah Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "jonahtanjz": 46
    }
  },
  {
    "path": "docs/team/rolandyuwy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 46
    }
  },
  {
    "path": "docs/team/sagarsureka.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "title: Sagar Sureka\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 46
    }
  },
  {
    "path": "docs/team/songyi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "title: Song Yi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 46
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "\u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expiryDate\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    \"expiryDate\": \"1-1-2020\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.FoodInventoryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.JsonFoodInventoryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FoodInventory ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventoryStorage foodInventoryStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new JsonFoodInventoryStorage(userPrefs.getFoodInventoryFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storage \u003d new StorageManager(foodInventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s food inventory"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The data from the sample food inventory will be used instead if"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code storage}\u0027s food inventory is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * or an empty food inventory will be used instead if errors occur"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * when reading {@code storage}\u0027s food inventory."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Optional\u003cReadOnlyFoodInventory\u003e simplyKitchenInventoryOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ReadOnlyFoodInventory initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            simplyKitchenInventoryOptional \u003d storage.readFoodInventory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (!simplyKitchenInventoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FoodInventory\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            initialData \u003d simplyKitchenInventoryOptional.orElseGet(SampleDataUtil::getSampleFoodInventory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    + \"Will be starting with an empty FoodInventory\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            initialData \u003d new FoodInventory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    + \"Will be starting with an empty FoodInventory\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            initialData \u003d new FoodInventory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    + \"Will be starting with an empty FoodInventory\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        logger.info(\"Starting FoodInventory \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 49,
      "-": 141
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final String LOG_FILE \u003d \"simplyKitchen.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"SimplyKitchen cannot understand this command!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n  %1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_INVALID_FOOD_DISPLAYED_INDEX \u003d \"The food item index provided is invalid.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + \"The index should be a positive integer \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + \"not greater than the number of items in the current list displayed.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String MESSAGE_FOODS_LISTED_OVERVIEW \u003d \"%1$d food items listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 4,
      "rolandyuwy": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 1,
      "rolandyuwy": 1,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the FoodInventory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @see seedu.simplykitchen.model.Model#getFoodInventory()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    ReadOnlyFoodInventory getFoodInventory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of food items */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the user prefs\u0027 Food inventory file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Path getFoodInventoryFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.FoodInventoryParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final FoodInventoryParser foodInventoryParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodInventoryParser \u003d new FoodInventoryParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Command command \u003d foodInventoryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            storage.saveFoodInventory(model.getFoodInventory());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ReadOnlyFoodInventory getFoodInventory() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return model.getFoodInventory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return model.getFilteredFoodList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Path getFoodInventoryFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return model.getFoodInventoryFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 22,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Adds a food item to the Food inventory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"EXPIRY DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n  \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Canned Tuna \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            + PREFIX_PRIORITY + \"HIGH \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"1-1-2020 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            + PREFIX_TAG + \"frozen \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            + PREFIX_TAG + \"20g\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food item added!\\n  %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food item already exists in the food inventory\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public AddCommand(Food food) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (model.hasFood(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 2,
      "SONGYI98": 3,
      "jonahtanjz": 5,
      "rolandyuwy": 15,
      "-": 35,
      "bchenghi": 3
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Clears the Food inventory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Food inventory has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model.setFoodInventory(new FoodInventory());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Deletes a food item identified using it\u0027s displayed index from the Food inventory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + \"INDEX\\n  \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Deleted Food Item:\\n  %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food foodToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 3,
      "rolandyuwy": 12,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Edits the details of an existing food item in the Food inventory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: \" + COMMAND_WORD + \" INDEX \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            + \"[\" + PREFIX_EXPIRY_DATE + \"EXPIRY DATE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n  \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            + PREFIX_PRIORITY + \"high \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"1-11-2021\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_EDIT_FOOD_SUCCESS \u003d \"Edited Food Item:\\n  %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food item already exists in the food inventory.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final EditFoodDescriptor editFoodDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param index of the food item in the filtered food list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param editFoodDescriptor details to edit the food item with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public EditCommand(Index index, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(editFoodDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.editFoodDescriptor \u003d new EditFoodDescriptor(editFoodDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food editedFood \u003d createEditedFood(foodToEdit, editFoodDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!foodToEdit.isSameFood(editedFood) \u0026\u0026 model.hasFood(editedFood)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model.setFood(foodToEdit, editedFood);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FOOD_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates and returns a {@code Food} with the details of {@code foodToEdit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * edited with {@code editFoodDescriptor}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static Food createEditedFood(Food foodToEdit, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assert foodToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Description updatedDescription \u003d editFoodDescriptor.getDescription().orElse(foodToEdit.getDescription());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Priority updatedPriority \u003d editFoodDescriptor.getPriority().orElse(foodToEdit.getPriority());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        ExpiryDate updatedExpiryDate \u003d editFoodDescriptor.getExpiryDate().orElse(foodToEdit.getExpiryDate());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFoodDescriptor.getTags().orElse(foodToEdit.getTags());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return new Food(updatedDescription, updatedPriority, updatedExpiryDate, updatedTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \u0026\u0026 editFoodDescriptor.equals(e.editFoodDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Stores the details to edit the food item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * corresponding field value of the food item."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static class EditFoodDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public EditFoodDescriptor() {}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public EditFoodDescriptor(EditFoodDescriptor toCopy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            setExpiryDate(toCopy.expiryDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, priority, expiryDate, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        public void setExpiryDate(ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        public Optional\u003cExpiryDate\u003e getExpiryDate() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            return Optional.ofNullable(expiryDate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (!(other instanceof EditFoodDescriptor)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            EditFoodDescriptor e \u003d (EditFoodDescriptor) other;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                    \u0026\u0026 getExpiryDate().equals(e.getExpiryDate())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 4,
      "SONGYI98": 12,
      "jonahtanjz": 12,
      "rolandyuwy": 40,
      "-": 128,
      "bchenghi": 11
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting SimplyKitchen as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bchenghi"
        },
        "content": " * Finds and lists all food items in Food inventory whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage : \" + COMMAND_WORD + \" KEYWORD [MORE_KEYWORDS]...\\n  \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" apple bread carrot\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public FindCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String.format(Messages.MESSAGE_FOODS_LISTED_OVERVIEW, model.getFilteredFoodList().size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 1,
      "rolandyuwy": 5,
      "-": 29,
      "bchenghi": 5
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Lists all food items in the Food inventory to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all food items\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 24
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 1,
      "rolandyuwy": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRIORITY, PREFIX_EXPIRY_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_EXPIRY_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(\"low\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(argMultimap.getValue(PREFIX_EXPIRY_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Food food \u003d new Food(description, priority, expiryDate, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return new AddCommand(food);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 1,
      "SONGYI98": 5,
      "jonahtanjz": 3,
      "rolandyuwy": 8,
      "-": 36,
      "bchenghi": 3
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final Prefix PREFIX_EXPIRY_DATE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 1,
      "jonahtanjz": 1,
      "rolandyuwy": 1,
      "-": 10,
      "bchenghi": 1
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRIORITY, PREFIX_EXPIRY_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditFoodDescriptor editFoodDescriptor \u003d new EditCommand.EditFoodDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            editFoodDescriptor.setDescription(ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                    .getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            editFoodDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPIRY_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            editFoodDescriptor.setExpiryDate(ParserUtil.parseExpiryDate("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                    argMultimap.getValue(PREFIX_EXPIRY_DATE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFoodDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!editFoodDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return new EditCommand(index, editFoodDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 6,
      "jonahtanjz": 4,
      "rolandyuwy": 12,
      "-": 56,
      "bchenghi": 4
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String[] descriptionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        return new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(descriptionKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 4,
      "-": 26,
      "bchenghi": 3
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/FoodInventoryParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodInventoryParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 14,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Parses an {@code String expiryDate} into an {@code ExpiryDate}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * @throws ParseException if the given {@code expiryDate} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static ExpiryDate parseExpiryDate(String expiryDate) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        String trimmedExpiryDate \u003d expiryDate.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        if (!ExpiryDate.isValidExpiryDate(trimmedExpiryDate)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            String errorMessage \u003d ExpiryDate.generateErrorMessage(trimmedExpiryDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            throw new ParseException(errorMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        return new ExpiryDate(trimmedExpiryDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 10,
      "jonahtanjz": 9,
      "rolandyuwy": 5,
      "-": 77,
      "bchenghi": 9
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/FoodInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Wraps all data at the Food-inventory level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodInventory implements ReadOnlyFoodInventory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final UniqueFoodList foods;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodInventory() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates a FoodInventory using the foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodInventory(ReadOnlyFoodInventory toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Replaces the contents of the food list with {@code foods}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.foods.setFoods(foods);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Resets the existing data of this {@code FoodInventory} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void resetData(ReadOnlyFoodInventory newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        setFoods(newData.getFoods());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    //// food-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns true if a food item with the same identity as {@code food} exists in the Food inventory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foods.contains(food);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Adds a food item to the Food inventory."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The food item must not already exist in the Food inventory."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foods.add(food);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Replaces the given food item {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code target} must exist in the Food inventory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The food item identity of {@code editedFood} must not be the same as another existing food item"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * in the Food inventory."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foods.setFood(target, editedFood);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Removes {@code key} from this {@code FoodInventory}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code key} must exist in the Food inventory."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void removeFood(Food key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foods.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foods.asUnmodifiableObservableList().size() + \" food items\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoods() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                || (other instanceof FoodInventory // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \u0026\u0026 foods.equals(((FoodInventory) other).foods));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foods.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 121
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the user prefs\u0027 Food inventory file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Path getFoodInventoryFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Sets the user prefs\u0027 Food inventory file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void setFoodInventoryFilePath(Path foodInventoryFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Replaces Food inventory data with the data in {@code foodInventory}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void setFoodInventory(ReadOnlyFoodInventory foodInventory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /** Returns the FoodInventory */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    ReadOnlyFoodInventory getFoodInventory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns true if a food item with the same identity as {@code food} exists in the Food inventory."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Deletes the given food item."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The food item must exist in the Food inventory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void deleteFood(Food target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Adds the given food item."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code food} must not already exist in the Food inventory."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Replaces the given food item {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code target} must exist in the Food inventory."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The food item identity of {@code editedFood} must not be the same as another existing food item"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * in the Food inventory."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void setFood(Food target, Food editedFood);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 88
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents the in-memory model of the Food inventory data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final FoodInventory foodInventory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a ModelManager with the given Food Inventory and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ModelManager(ReadOnlyFoodInventory foodInventory, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireAllNonNull(foodInventory, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        logger.fine(\"Initializing with Food inventory: \" + foodInventory"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.foodInventory \u003d new FoodInventory(foodInventory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.foodInventory.getFoods());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this(new FoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Path getFoodInventoryFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return userPrefs.getFoodInventoryFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoodInventoryFilePath(Path foodInventoryFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(foodInventoryFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        userPrefs.setFoodInventoryFilePath(foodInventoryFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodInventory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoodInventory(ReadOnlyFoodInventory foodInventory) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.foodInventory.resetData(foodInventory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ReadOnlyFoodInventory getFoodInventory() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodInventory;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodInventory.hasFood(food);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodInventory.removeFood(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodInventory.addFood(food);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodInventory.setFood(target, editedFood);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code versionedFoodInventory}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodInventory.equals(other.foodInventory)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \u0026\u0026 filteredFoods.equals(other.filteredFoods);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 152
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/ReadOnlyFoodInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Unmodifiable view of a Food inventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public interface ReadOnlyFoodInventory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns an unmodifiable view of the food list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This list will not contain any duplicate food items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    ObservableList\u003cFood\u003e getFoods();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 17
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Path getFoodInventoryFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Path foodInventoryFilePath \u003d Paths.get(\"data\" , \"foodInventory.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        setFoodInventoryFilePath(newUserPrefs.getFoodInventoryFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Path getFoodInventoryFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodInventoryFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoodInventoryFilePath(Path foodInventoryFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(foodInventoryFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.foodInventoryFilePath \u003d foodInventoryFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \u0026\u0026 foodInventoryFilePath.equals(o.foodInventoryFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return Objects.hash(guiSettings, foodInventoryFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + foodInventoryFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/food/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": " * Represents a Food\u0027s description in the Food inventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            \"Description should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\u0027 ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "bchenghi": 20
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/food/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                        .getDescription().fullDescription, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "bchenghi": 10
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/food/ExpiryDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * Represents a Food Item\u0027s expiry date in Simply Kitchen."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExpiryDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "public class ExpiryDate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            \"The expiry date should be of the format DD-MM-YYYY or DD/MM/YYYY. \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String MESSAGE_SHORTENED_YEAR \u003d \"The year should be 4 digits long. \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"The expiry date does not exist. \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"d-M-yyyy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Constructs an {@code ExpiryDate}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * @param expiryDateString A valid expiry date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public ExpiryDate(String expiryDateString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        requireNonNull(expiryDateString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        checkArgument(isValidExpiryDate(expiryDateString), generateErrorMessage(expiryDateString));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        value \u003d replaceSlashWithDash(expiryDateString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Returns if a given string is a valid expiry date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static boolean isValidExpiryDate(String testExpiryDateString) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            testExpiryDateString \u003d replaceSlashWithDash(testExpiryDateString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            // check for invalid formatting of expiry date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            SimpleDateFormat simpleDateFormatter \u003d new SimpleDateFormat(DATE_PATTERN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            simpleDateFormatter.setLenient(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            simpleDateFormatter.parse(testExpiryDateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            // check for shortened year or invalid expiry date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            LocalDate.parse(testExpiryDateString, formatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        } catch (ParseException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Generates an error message based on why the expiry date is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * @param invalidExpiryDateString An invalid expiry date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * @return A string describing the error message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static String generateErrorMessage(String invalidExpiryDateString) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        invalidExpiryDateString \u003d replaceSlashWithDash(invalidExpiryDateString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        String[] split \u003d invalidExpiryDateString.split(\"-\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        if (split.length !\u003d 3) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            // invalid formatting of expiry date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        if (!isFourDigitYear(split[2])) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            // year of expiry date is not 4 digits long"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            return MESSAGE_SHORTENED_YEAR;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // expiry date does not exist"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        return MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Replaces all occurrences of \u0027/\u0027 with \u0027-\u0027."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private static String replaceSlashWithDash(String expiryDateString) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        return expiryDateString.replace(\u0027/\u0027, \u0027-\u0027);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Guarantees: The date String is formatted correctly."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private static boolean isFourDigitYear(String yearString) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        return yearString.length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                || (other instanceof ExpiryDate // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                \u0026\u0026 value.equals(((ExpiryDate) other).value)); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 112
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a Food item in the Food inventory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Food(Description description, Priority priority, ExpiryDate expiryDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        requireAllNonNull(description, priority, expiryDate, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public ExpiryDate getExpiryDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * Returns true if both food items of the same description have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This defines a weaker notion of equality between two food items."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                \u0026\u0026 otherFood.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                \u0026\u0026 (otherFood.getPriority().equals(getPriority()) || otherFood.getExpiryDate().equals(getExpiryDate()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns true if both food items have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This defines a stronger notion of equality between two food items."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        return otherFood.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                \u0026\u0026 otherFood.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                \u0026\u0026 otherFood.getExpiryDate().equals(getExpiryDate())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return Objects.hash(description, priority, expiryDate, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        builder.append(getDescription()).append(\", \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                .append(getExpiryDate()).append(\", \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                .append(\"\\n  Tags: \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 6,
      "SONGYI98": 5,
      "jonahtanjz": 7,
      "rolandyuwy": 14,
      "-": 70,
      "bchenghi": 7
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/food/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": " * Represents a Food item priority level in the food inventory system."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public enum Level {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        LOW,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        MEDIUM,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        HIGH"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            \"Priorities should be either high, medium or low.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public final Level value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     * @param priority A valid priority level."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        priority \u003d priority.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        switch(priority) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            value \u003d Level.LOW;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            value \u003d Level.MEDIUM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            value \u003d Level.HIGH;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     * Returns true if a given string is a valid priority level."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static boolean isValidPriority(String priority) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        priority \u003d priority.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        return priority.equals(\"low\") || priority.equals(\"medium\") || priority.equals(\"high\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                \u0026\u0026 (value.equals(((Priority) other).value))); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonahtanjz": 70
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/food/UniqueFoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A list of food items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A food is considered unique by comparing using {@code Food#isSameFood(Food)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * food items uses Food#isSameFood(Food) for equality so as to ensure that the food being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * unique in terms of identity in the UniqueFoodList. However, the removal of a food uses Food#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * as to ensure that the food with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Adds a food to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The food must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Removes the equivalent food from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The food must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns true if {@code foods} contains only unique foods."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 137
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Signals that the operation will result in duplicate Foods (Food items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(\"Operation would result in duplicate food items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 11
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 6
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a Tag in the Food inventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            \"Tags names should only contain alphanumeric, spaces or these special characters: #$%\u0026-()\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[#$%\u0026()\\\\-\\\\s\\\\p{Alnum}]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonahtanjz": 3,
      "rolandyuwy": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Contains utility methods for populating {@code FoodInventory} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            new Food(new Description(\"Apple Pie\"), new Priority(\"high\"), new ExpiryDate(\"30-9-2020\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                    getTagSet(\"Frozen\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            new Food(new Description(\"Bread\"), new Priority(\"medium\"), new ExpiryDate(\"1-10-2020\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                    getTagSet(\"Wholemeal\", \"400g\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            new Food(new Description(\"Chocolate Cake\"), new Priority(\"high\"), new ExpiryDate(\"1-1-2021\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                    getTagSet(\"$50\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            new Food(new Description(\"Donuts\"), new Priority(\"low\"), new ExpiryDate(\"1-11-2021\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                    getTagSet(\"Plain\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            new Food(new Description(\"Ice Cream\"), new Priority(\"low\"), new ExpiryDate(\"15-6-2021\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                    getTagSet(\"Strawberry-flavoured\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            new Food(new Description(\"Raspberry Jam\"), new Priority(\"medium\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    new ExpiryDate(\"12-12-2021\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                    getTagSet(\"Sugar-free\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static ReadOnlyFoodInventory getSampleFoodInventory() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory sampleFoodInventory \u003d new FoodInventory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            sampleFoodInventory.addFood(sampleFood);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return sampleFoodInventory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 1,
      "SONGYI98": 1,
      "jonahtanjz": 13,
      "rolandyuwy": 38,
      "bchenghi": 1
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/FoodInventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a storage for {@link FoodInventory}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public interface FoodInventoryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Path getFoodInventoryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns FoodInventory data as a {@link ReadOnlyFoodInventory}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Optional\u003cReadOnlyFoodInventory\u003e readFoodInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @see #getFoodInventoryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Optional\u003cReadOnlyFoodInventory\u003e readFoodInventory(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodInventory} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param foodInventory cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void saveFoodInventory(ReadOnlyFoodInventory foodInventory) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @see #saveFoodInventory(ReadOnlyFoodInventory)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void saveFoodInventory(ReadOnlyFoodInventory foodInventory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 47
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/JsonAdaptedFood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private final String expiryDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"description\") String description, @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                           @JsonProperty(\"expiryDate\") String expiryDate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        priority \u003d source.getPriority().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        expiryDate \u003d source.getExpiryDate().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        if (expiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ExpiryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        if (!ExpiryDate.isValidExpiryDate(expiryDate)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            throw new IllegalValueException(ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        final ExpiryDate modelExpiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return new Food(modelDescription, modelPriority, modelExpiryDate, modelTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 2,
      "SONGYI98": 10,
      "jonahtanjz": 11,
      "rolandyuwy": 13,
      "-": 51,
      "bchenghi": 13
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/JsonFoodInventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A class to access FoodInventory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class JsonFoodInventoryStorage implements FoodInventoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodInventoryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public JsonFoodInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Path getFoodInventoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Optional\u003cReadOnlyFoodInventory\u003e readFoodInventory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return readFoodInventory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Similar to {@link #readFoodInventory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Optional\u003cReadOnlyFoodInventory\u003e readFoodInventory(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Optional\u003cJsonSerializableFoodInventory\u003e jsonSimplyKitchenInventory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                filePath, JsonSerializableFoodInventory.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!jsonSimplyKitchenInventory.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return Optional.of(jsonSimplyKitchenInventory.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void saveFoodInventory(ReadOnlyFoodInventory foodInventory) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        saveFoodInventory(foodInventory, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Similar to {@link #saveFoodInventory(ReadOnlyFoodInventory)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void saveFoodInventory(ReadOnlyFoodInventory foodInventory, Path filePath)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(foodInventory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFoodInventory(foodInventory), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 82
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/JsonSerializableFoodInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * An Immutable Food inventory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "@JsonRootName(value \u003d \"foodInventory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "class JsonSerializableFoodInventory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Constructs a {@code JsonSerializableFoodInventory} with the given food items."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public JsonSerializableFoodInventory(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Converts a given {@code ReadOnlyFoodInventory} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFoodInventory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public JsonSerializableFoodInventory(ReadOnlyFoodInventory source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foods.addAll(source.getFoods().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Converts this Food inventory into the model\u0027s {@code FoodInventory} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodInventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory foodInventory \u003d new FoodInventory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (foodInventory.hasFood(food)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            foodInventory.addFood(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodInventory;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 60
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public interface Storage extends FoodInventoryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Path getFoodInventoryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    Optional\u003cReadOnlyFoodInventory\u003e readFoodInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    void saveFoodInventory(ReadOnlyFoodInventory foodInventory) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 32
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Manages storage of FoodInventory data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private FoodInventoryStorage foodInventoryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code FoodInventoryStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public StorageManager(FoodInventoryStorage foodInventoryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.foodInventoryStorage \u003d foodInventoryStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodInventory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Path getFoodInventoryFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodInventoryStorage.getFoodInventoryFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Optional\u003cReadOnlyFoodInventory\u003e readFoodInventory()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return readFoodInventory(foodInventoryStorage.getFoodInventoryFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Optional\u003cReadOnlyFoodInventory\u003e readFoodInventory(Path filePath)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodInventoryStorage.readFoodInventory(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void saveFoodInventory(ReadOnlyFoodInventory foodInventory) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        saveFoodInventory(foodInventory, foodInventoryStorage.getFoodInventoryFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void saveFoodInventory(ReadOnlyFoodInventory foodInventory, Path filePath)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodInventoryStorage.saveFoodInventory(foodInventory, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 82
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a storage for {@link seedu.simplykitchen.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Saves the given {@link seedu.simplykitchen.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "         * @see seedu.simplykitchen.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/FoodCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * The issue on FoodInventory level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private Label expiryDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates a {@code FoodCard} with the given {@code Food} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        description.setText(food.getDescription().fullDescription);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        priority.setText(food.getPriority().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        setPriorityColor(food.getPriority().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        expiryDate.setText(food.getExpiryDate().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private void setPriorityColor(Priority.Level level) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        String priorityColor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        switch(level) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            priorityColor \u003d \"#00802b\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            priorityColor \u003d \"#cc7a00\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            priorityColor \u003d \"#cc0000\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid priority level\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        priority.setStyle(\"-fx-background-color: \" + priorityColor + \";\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 2,
      "jonahtanjz": 20,
      "rolandyuwy": 15,
      "-": 56,
      "bchenghi": 2
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/FoodListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Panel containing the list of food items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private ListView\u003cFood\u003e foodListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates a {@code FoodListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code FoodCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 49
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f13-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 99,
      "bchenghi": 1
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private StackPane foodListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private StackPane statusBarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFoodInventoryFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        statusBarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodListPanel getFoodListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @see seedu.simplykitchen.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 17,
      "-": 179
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/simply_kitchen_fridge.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 5,
      "-": 83,
      "bchenghi": 1
    }
  },
  {
    "path": "src/main/java/seedu/simplykitchen/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "      \u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expiryDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 1,
      "jonahtanjz": 1,
      "-": 31,
      "bchenghi": 1
    }
  },
  {
    "path": "src/main/resources/view/FoodListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  \u003cListView fx:id\u003d\"foodListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "         title\u003d\"SimplyKitchen\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    \u003cImage url\u003d\"@/images/simply_kitchen_fridge.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        \u003cVBox fx:id\u003d\"foodList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "          \u003cStackPane fx:id\u003d\"foodListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusBarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 3,
      "rolandyuwy": 3,
      "-": 51,
      "bchenghi": 2
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        final Index fifthFoodIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(fifthFoodIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(fifthFoodIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(fifthFoodIndex.equals(fifthFoodIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(fifthFoodIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(fifthFoodIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(fifthFoodIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/simply_kitchen_fridge.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 33,
      "bchenghi": 1
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.DESCRIPTION_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.PRIORITY_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.APPLE_PIE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.JsonFoodInventoryStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonFoodInventoryStorage simplyKitchenStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new JsonFoodInventoryStorage(temporaryFolder.resolve(\"simplyKitchen.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(simplyKitchenStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // Setup LogicManager with JsonFoodInventoryIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonFoodInventoryStorage simplyKitchenStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new JsonFoodInventoryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionSimplyKitchen.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(simplyKitchenStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + DESCRIPTION_DESC_APPLE_PIE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + PRIORITY_DESC_APPLE_PIE + EXPIRY_DATE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(APPLE_PIE).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.addFood(expectedFood);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static class JsonFoodInventoryIoExceptionThrowingStub extends JsonFoodInventoryStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        private JsonFoodInventoryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public void saveFoodInventory(ReadOnlyFoodInventory foodInventory, Path filePath)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 2,
      "jonahtanjz": 1,
      "rolandyuwy": 34,
      "-": 121,
      "bchenghi": 5
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_newFood_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.addFood(validFood);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(new AddCommand(validFood), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validFood), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_duplicateFood_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food foodInList \u003d model.getFoodInventory().getFoods().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandFailure(new AddCommand(foodInList), model, AddCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 45
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void constructor_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ModelStubAcceptingFoodAdded modelStub \u003d new ModelStubAcceptingFoodAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFood).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFood), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(Arrays.asList(validFood), modelStub.foodAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_duplicateFood_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFood);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFood(validFood);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_FOOD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Food applePie \u003d new FoodBuilder().withDescription(\"Apple Pie\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Food bread \u003d new FoodBuilder().withDescription(\"Bread\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        AddCommand addApplePieCommand \u003d new AddCommand(applePie);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        AddCommand addBreadCommand \u003d new AddCommand(bread);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(addApplePieCommand.equals(addApplePieCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        AddCommand addApplePieCommandCopy \u003d new AddCommand(applePie);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(addApplePieCommand.equals(addApplePieCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(addApplePieCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(addApplePieCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(addApplePieCommand.equals(addBreadCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public Path getFoodInventoryFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public void setFoodInventoryFilePath(Path foodInventoryFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public void setFoodInventory(ReadOnlyFoodInventory foodInventory) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public ReadOnlyFoodInventory getFoodInventory() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * A Model stub that contains a single food."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private class ModelStubWithFood extends ModelStub {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        private final Food food;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ModelStubWithFood(Food food) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return this.food.isSameFood(food);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        final ArrayList\u003cFood\u003e foodAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return foodAdded.stream().anyMatch(food::isSameFood);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            foodAdded.add(food);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public ReadOnlyFoodInventory getFoodInventory() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new FoodInventory();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 53,
      "-": 131,
      "bchenghi": 10
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_emptyFoodInventory_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_nonEmptyFoodInventory_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.setFoodInventory(new FoodInventory());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 32
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String VALID_DESCRIPTION_APPLE_PIE \u003d \"Apple Pie\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String VALID_DESCRIPTION_BREAD \u003d \"Bread\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String VALID_PRIORITY_APPLE_PIE \u003d \"high\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String VALID_PRIORITY_BREAD \u003d \"medium\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_APPLE_PIE \u003d \"1-1-2021\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_BREAD \u003d \"31-12-2021\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String VALID_TAG_FROZEN \u003d \"Frozen\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String VALID_TAG_WHOLEMEAL \u003d \"Wholemeal\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String DESCRIPTION_DESC_APPLE_PIE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_APPLE_PIE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String DESCRIPTION_DESC_BREAD \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BREAD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String PRIORITY_DESC_APPLE_PIE \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_APPLE_PIE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String PRIORITY_DESC_BREAD \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_BREAD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String EXPIRY_DATE_DESC_APPLE_PIE \u003d \" \" + PREFIX_EXPIRY_DATE + VALID_EXPIRY_DATE_APPLE_PIE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String EXPIRY_DATE_DESC_BREAD \u003d \" \" + PREFIX_EXPIRY_DATE + VALID_EXPIRY_DATE_BREAD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String TAG_DESC_FROZEN \u003d \" \" + PREFIX_TAG + VALID_TAG_FROZEN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String TAG_DESC_WHOLEMEAL \u003d \" \" + PREFIX_TAG + VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "            + \"D\u0026nut\"; // \u0027\u0026\u0027 not allowed in descriptions"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"lower\"; // \u0027lower\u0027 not valid priority"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String INVALID_EXPIRY_DATE_FORMAT_DESC \u003d \" \" + PREFIX_EXPIRY_DATE + \"1--1-2020\"; // extra dash"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String INVALID_EXPIRY_DATE_SHORTENED_DESC \u003d \" \" + PREFIX_EXPIRY_DATE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            + \"1-1-22\"; // shortened year"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String INVALID_EXPIRY_DATE_DESC \u003d \" \" + PREFIX_EXPIRY_DATE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            + \"29-2-2021\"; // non-existent expiry date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"frozen?\"; // \u0027?\u0027 not allowed in tags"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_BREAD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DESC_APPLE_PIE \u003d new EditFoodDescriptorBuilder().withDescription(VALID_DESCRIPTION_APPLE_PIE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                .withPriority(VALID_PRIORITY_APPLE_PIE).withExpiryDate(VALID_EXPIRY_DATE_APPLE_PIE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withTags(VALID_TAG_FROZEN).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DESC_BREAD \u003d new EditFoodDescriptorBuilder().withDescription(VALID_DESCRIPTION_BREAD)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                .withPriority(VALID_PRIORITY_BREAD).withExpiryDate(VALID_EXPIRY_DATE_BREAD)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withTags(VALID_TAG_WHOLEMEAL, VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * - the SimplyKitchen inventory, filtered food list and selected food in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory expectedFoodInventory \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new FoodInventory(actualModel.getFoodInventory());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(expectedFoodInventory, actualModel.getFoodInventory());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * {@code model}\u0027s food inventory."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        final String[] splitDescription \u003d food.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        model.updateFilteredFoodList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitDescription[0])));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(1, model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 12,
      "jonahtanjz": 13,
      "rolandyuwy": 21,
      "-": 67,
      "bchenghi": 14
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        showNoFood(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of food inventory list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFoodInventory().getFoods().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FOOD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private void showNoFood(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model.updateFilteredFoodList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(model.getFilteredFoodList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 40,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.DESC_BREAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BREAD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_PRIORITY_BREAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food editedFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(editedFood).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FOOD, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new FoodInventory(model.getFoodInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.setFood(model.getFilteredFoodList().get(0), editedFood);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index indexLastFood \u003d Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food lastFood \u003d model.getFilteredFoodList().get(indexLastFood.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodBuilder foodInList \u003d new FoodBuilder(lastFood);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Food editedFood \u003d foodInList.withDescription(VALID_DESCRIPTION_BREAD).withPriority(VALID_PRIORITY_BREAD)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BREAD)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withPriority(VALID_PRIORITY_BREAD).withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastFood, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new FoodInventory(model.getFoodInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.setFood(lastFood, editedFood);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FOOD, new EditCommand.EditFoodDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food editedFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new FoodInventory(model.getFoodInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food foodInFilteredList \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Food editedFood \u003d new FoodBuilder(foodInFilteredList).withDescription(VALID_DESCRIPTION_BREAD).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FOOD,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new EditFoodDescriptorBuilder().withDescription(VALID_DESCRIPTION_BREAD).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new FoodInventory(model.getFoodInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.setFood(model.getFilteredFoodList().get(0), editedFood);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_duplicateFoodUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food firstFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(firstFood).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_FOOD, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_duplicateFoodFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // edit food in filtered list into a duplicate in food inventory"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food foodInList \u003d model.getFoodInventory().getFoods().get(INDEX_SECOND_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FOOD,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new EditFoodDescriptorBuilder(foodInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_invalidFoodIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BREAD).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * but smaller than size of SimplyKitchen inventory."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_invalidFoodIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of food inventory list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFoodInventory().getFoods().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new EditFoodDescriptorBuilder().withDescription(VALID_DESCRIPTION_BREAD).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_FOOD, DESC_APPLE_PIE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        EditFoodDescriptor copyDescriptor \u003d new EditFoodDescriptor(DESC_APPLE_PIE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_FOOD, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_FOOD, DESC_APPLE_PIE)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_FOOD, DESC_BREAD)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonahtanjz": 5,
      "rolandyuwy": 160,
      "bchenghi": 14
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/EditFoodDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.DESC_BREAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BREAD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_BREAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_PRIORITY_BREAD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class EditFoodDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptorWithSameValues \u003d new EditCommand.EditFoodDescriptor(DESC_APPLE_PIE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(DESC_APPLE_PIE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(DESC_APPLE_PIE.equals(DESC_APPLE_PIE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(DESC_APPLE_PIE.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(DESC_APPLE_PIE.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(DESC_APPLE_PIE.equals(DESC_BREAD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        EditCommand.EditFoodDescriptor editedApplePie \u003d new EditFoodDescriptorBuilder(DESC_APPLE_PIE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BREAD).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(DESC_APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        editedApplePie \u003d new EditFoodDescriptorBuilder(DESC_APPLE_PIE).withPriority(VALID_PRIORITY_BREAD).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(DESC_APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // different expiry date -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        editedApplePie \u003d new EditFoodDescriptorBuilder(DESC_APPLE_PIE).withExpiryDate(VALID_EXPIRY_DATE_BREAD).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(DESC_APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        editedApplePie \u003d new EditFoodDescriptorBuilder(DESC_APPLE_PIE).withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(DESC_APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 2,
      "jonahtanjz": 5,
      "rolandyuwy": 29,
      "bchenghi": 17
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_FOODS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.CARROT_CAKE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.DARK_CHOCOLATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.EGGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_zeroKeywords_noFoodFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOODS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_multipleKeywords_multipleFoodsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOODS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Cake Dark Eggs\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertEquals(Arrays.asList(CARROT_CAKE, DARK_CHOCOLATE, EGGS), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 17,
      "-": 52,
      "bchenghi": 15
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 39
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import static seedu.simplykitchen.logic.commands.AddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.DESCRIPTION_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BREAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_BREAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_EXPIRY_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_EXPIRY_DATE_FORMAT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_EXPIRY_DATE_SHORTENED_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.PRIORITY_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.PRIORITY_DESC_BREAD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.TAG_DESC_FROZEN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.TAG_DESC_WHOLEMEAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BREAD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_BREAD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_FROZEN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.APPLE_PIE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.BREAD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(BREAD).withTags(VALID_TAG_FROZEN).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_BREAD + TAG_DESC_FROZEN, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_APPLE_PIE + DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_BREAD + TAG_DESC_FROZEN, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BREAD + PRIORITY_DESC_APPLE_PIE + PRIORITY_DESC_BREAD"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_BREAD + TAG_DESC_FROZEN, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // multiple expiry dates - last expiry date accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD + EXPIRY_DATE_DESC_APPLE_PIE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_BREAD + TAG_DESC_FROZEN, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Food expectedFoodMultipleTags \u003d new FoodBuilder(BREAD).withTags(VALID_TAG_FROZEN, VALID_TAG_WHOLEMEAL)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD + EXPIRY_DATE_DESC_BREAD"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                + TAG_DESC_WHOLEMEAL + TAG_DESC_FROZEN, new AddCommand(expectedFoodMultipleTags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(APPLE_PIE).withTags().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_APPLE_PIE + PRIORITY_DESC_APPLE_PIE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_APPLE_PIE, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_BREAD + PRIORITY_DESC_BREAD + EXPIRY_DATE_DESC_BREAD,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // missing expiry date prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD + VALID_EXPIRY_DATE_BREAD,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_BREAD + PRIORITY_DESC_BREAD + VALID_EXPIRY_DATE_BREAD,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + PRIORITY_DESC_BREAD"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_BREAD"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                + TAG_DESC_WHOLEMEAL + TAG_DESC_FROZEN, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BREAD + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_BREAD"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                + TAG_DESC_WHOLEMEAL + TAG_DESC_FROZEN, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // invalid expiry date format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD + INVALID_EXPIRY_DATE_FORMAT_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                + TAG_DESC_WHOLEMEAL + TAG_DESC_FROZEN, ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // invalid shortened expiry date"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD + INVALID_EXPIRY_DATE_SHORTENED_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + TAG_DESC_WHOLEMEAL + TAG_DESC_FROZEN, ExpiryDate.MESSAGE_SHORTENED_YEAR);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // invalid non-existent expiry date"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD + INVALID_EXPIRY_DATE_DESC"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + TAG_DESC_WHOLEMEAL + TAG_DESC_FROZEN, ExpiryDate.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD + EXPIRY_DATE_DESC_BREAD"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FROZEN, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + PRIORITY_DESC_BREAD + INVALID_EXPIRY_DATE_FORMAT_DESC,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_BREAD + PRIORITY_DESC_BREAD"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_BREAD + TAG_DESC_WHOLEMEAL + TAG_DESC_FROZEN,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 4,
      "SONGYI98": 34,
      "jonahtanjz": 24,
      "rolandyuwy": 12,
      "-": 47,
      "bchenghi": 11
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FOOD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.DESCRIPTION_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_BREAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_EXPIRY_DATE_FORMAT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.PRIORITY_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.PRIORITY_DESC_BREAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.TAG_DESC_FROZEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.TAG_DESC_WHOLEMEAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_DESCRIPTION_APPLE_PIE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_APPLE_PIE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_BREAD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_PRIORITY_APPLE_PIE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_PRIORITY_BREAD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_FROZEN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_THIRD_FOOD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_APPLE_PIE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DESCRIPTION_DESC_APPLE_PIE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESCRIPTION_DESC_APPLE_PIE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS); // invalid priority"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPIRY_DATE_FORMAT_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                ExpiryDate.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // invalid priority followed by valid expiry date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC + EXPIRY_DATE_DESC_APPLE_PIE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // valid priority followed by invalid priority. The test case for invalid priority followed by valid priority"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + PRIORITY_DESC_BREAD + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Food} being edited,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FROZEN + TAG_DESC_WHOLEMEAL + TAG_EMPTY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FROZEN + TAG_EMPTY + TAG_DESC_WHOLEMEAL,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FROZEN + TAG_DESC_WHOLEMEAL,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC + INVALID_EXPIRY_DATE_FORMAT_DESC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                + VALID_PRIORITY_APPLE_PIE, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_BREAD + TAG_DESC_WHOLEMEAL"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_APPLE_PIE + DESCRIPTION_DESC_APPLE_PIE + TAG_DESC_FROZEN;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withDescription(VALID_DESCRIPTION_APPLE_PIE)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                .withPriority(VALID_PRIORITY_BREAD).withExpiryDate(VALID_EXPIRY_DATE_APPLE_PIE)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withTags(VALID_TAG_WHOLEMEAL, VALID_TAG_FROZEN).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_BREAD + EXPIRY_DATE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withPriority(VALID_PRIORITY_BREAD)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_APPLE_PIE).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FOOD;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_APPLE_PIE).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withPriority(VALID_PRIORITY_APPLE_PIE).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // expiry date"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPIRY_DATE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withExpiryDate(VALID_EXPIRY_DATE_APPLE_PIE).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FROZEN;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withTags(VALID_TAG_FROZEN).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_APPLE_PIE"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_APPLE_PIE + TAG_DESC_FROZEN + PRIORITY_DESC_APPLE_PIE"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_APPLE_PIE + TAG_DESC_FROZEN + PRIORITY_DESC_BREAD"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                + EXPIRY_DATE_DESC_BREAD + TAG_DESC_WHOLEMEAL;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withPriority(VALID_PRIORITY_BREAD)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_BREAD)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withTags(VALID_TAG_FROZEN, VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRIORITY_DESC + PRIORITY_DESC_BREAD;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withPriority(VALID_PRIORITY_BREAD).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPIRY_DATE_DESC_BREAD + INVALID_PRIORITY_DESC + PRIORITY_DESC_BREAD;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withPriority(VALID_PRIORITY_BREAD)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_BREAD).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FOOD;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 1,
      "SONGYI98": 22,
      "jonahtanjz": 39,
      "rolandyuwy": 23,
      "-": 108,
      "bchenghi": 15
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Anchovies\", \"Bread\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertParseSuccess(parser, \"Anchovies Bread\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertParseSuccess(parser, \" \\n Anchovies \\n \\t Bread  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 5,
      "-": 25,
      "bchenghi": 4
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/parser/FoodInventoryParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodInventoryParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final FoodInventoryParser parser \u003d new FoodInventoryParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FoodUtil.getAddCommand(food));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(new AddCommand(food), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FOOD), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(food).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                + INDEX_FIRST_FOOD.getOneBased() + \" \" + FoodUtil.getEditFoodDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_FOOD, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertEquals(new FindCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 29,
      "-": 69,
      "bchenghi": 2
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"R@spberry\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"MEDIUM-HIGH\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private static final String INVALID_EXPIRY_DATE \u003d \"32-9-2020\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private static final String INVALID_TAG \u003d \"^frozen\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Raspberry Jam\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private static final String VALID_EXPIRY_DATE \u003d \"1-1-2022\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"sugar-free\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"$100\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void parseExpiryDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExpiryDate((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void parseExpiryDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExpiryDate(INVALID_EXPIRY_DATE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void parseExpiryDate_validValueWithoutWhitespace_returnsExpiryDate() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        ExpiryDate expectedExpiryDate \u003d new ExpiryDate(VALID_EXPIRY_DATE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertEquals(expectedExpiryDate, ParserUtil.parseExpiryDate(VALID_EXPIRY_DATE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void parseExpiryDate_validValueWithWhitespace_returnsTrimmedExpiryDate() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        String expiryDateWithWhitespace \u003d WHITESPACE + VALID_EXPIRY_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        ExpiryDate expectedExpiryDate \u003d new ExpiryDate(VALID_EXPIRY_DATE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertEquals(expectedExpiryDate, ParserUtil.parseExpiryDate(expiryDateWithWhitespace));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 14,
      "jonahtanjz": 17,
      "rolandyuwy": 8,
      "-": 116,
      "bchenghi": 14
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/FoodInventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.APPLE_PIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodInventoryTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final FoodInventory foodInventory \u003d new FoodInventory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(Collections.emptyList(), foodInventory.getFoods());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodInventory.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void resetData_withValidReadOnlyFoodInventory_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory newData \u003d getTypicalFoodInventory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodInventory.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(newData, foodInventory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void resetData_withDuplicateFoods_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // Two foods with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(APPLE_PIE).withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        List\u003cFood\u003e newFoods \u003d Arrays.asList(APPLE_PIE, editedAlice);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventoryStub newData \u003d new FoodInventoryStub(newFoods);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e foodInventory.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodInventory.hasFood(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void hasFood_foodNotInFoodInventory_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(foodInventory.hasFood(APPLE_PIE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void hasFood_foodInFoodInventory_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        foodInventory.addFood(APPLE_PIE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(foodInventory.hasFood(APPLE_PIE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void hasFood_foodWithSameIdentityFieldsInFoodInventory_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        foodInventory.addFood(APPLE_PIE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Food editedApplePie \u003d new FoodBuilder(APPLE_PIE).withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertTrue(foodInventory.hasFood(editedApplePie));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e foodInventory.getFoods().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * A stub ReadOnlyFoodInventory whose foods list can violate interface constraints."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static class FoodInventoryStub implements ReadOnlyFoodInventory {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventoryStub(Collection\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoods() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 1,
      "jonahtanjz": 3,
      "rolandyuwy": 89,
      "bchenghi": 6
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.ANCHOVIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.BAGEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodInventoryBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(new FoodInventory(), new FoodInventory("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                modelManager.getFoodInventory()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        userPrefs.setFoodInventoryFilePath(Paths.get(\"foodInventory/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        userPrefs.setFoodInventoryFilePath(Paths.get(\"new/foodInventory/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoodInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFoodInventoryFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoodInventoryFilePath_validPath_setsFoodInventoryFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Path path \u003d Paths.get(\"foodInventory/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        modelManager.setFoodInventoryFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(path, modelManager.getFoodInventoryFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFood(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void hasFood_foodNotInFoodInventory_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(modelManager.hasFood(ANCHOVIES));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void hasFood_foodInFoodInventory_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        modelManager.addFood(ANCHOVIES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(modelManager.hasFood(ANCHOVIES));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory foodInventory \u003d new FoodInventoryBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                .withFood(ANCHOVIES).withFood(BAGEL).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory differentFoodInventory \u003d new FoodInventory();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        modelManager \u003d new ModelManager(foodInventory, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(foodInventory, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different foodInventory -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFoodInventory, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String[] keywords \u003d ANCHOVIES.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        modelManager.updateFilteredFoodList(new DescriptionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodInventory, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        modelManager.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        differentUserPrefs.setFoodInventoryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodInventory, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 31,
      "-": 94,
      "bchenghi": 9
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoodInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFoodInventoryFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/food/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withDescription(\"Apple Bread\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Apple\", \"Bread\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withDescription(\"Apple Bread\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bread\", \"Carrot\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withDescription(\"Apple Carrot\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aPple\", \"bREad\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withDescription(\"Apple Bread\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withDescription(\"Apple\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carrot\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withDescription(\"Apple Bread\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // Keywords match priority and expiry date, but does not match description"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"low\", \"31-1-2021\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withDescription(\"Apple\").withPriority(\"low\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                .withExpiryDate(\"31-1-2021\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 3,
      "jonahtanjz": 1,
      "-": 50,
      "bchenghi": 26
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/food/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(Description.isValidDescription(\"peanut*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bchenghi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peanut butter\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(Description.isValidDescription(\"TWG 1864\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Lay\u0027s Sour Cream Flavoured Potato Chips\")); // long description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bchenghi": 40
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/food/ExpiryDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "public class ExpiryDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpiryDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void constructor_invalidExpiryDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        String invalidExpiryDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExpiryDate(invalidExpiryDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void isValidExpiryDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // null expiry date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExpiryDate.isValidExpiryDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // blank expiry date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // invalid expiry date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"06/2020\")); // missing day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"06/06\")); // missing year"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"1-6-20\")); // shortened year"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"32-9-2020\")); // day does not exist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"1-13-2020\")); // month does not exist"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"31-9-20202\")); // year does not exist"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"30-02-2021\")); // non-existent expiry date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"1--10-2020\")); // extra dash"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"1//10/2020\")); // extra slash"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"2020-1-1\")); // wrong date format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        // valid expiry date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertTrue(ExpiryDate.isValidExpiryDate(\"1-9-2020\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertTrue(ExpiryDate.isValidExpiryDate(\"01-09-2022\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertTrue(ExpiryDate.isValidExpiryDate(\"1/9/2020\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        assertTrue(ExpiryDate.isValidExpiryDate(\"01/09/2022\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 49
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BREAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_APPLE_PIE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_BREAD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_PRIORITY_BREAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.APPLE_PIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.BREAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void isSameFood() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(APPLE_PIE.isSameFood(APPLE_PIE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.isSameFood(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // different priorities and expiry date -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Food editedApplePie \u003d new FoodBuilder(APPLE_PIE).withPriority(VALID_PRIORITY_BREAD)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_BREAD).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.isSameFood(editedApplePie));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        editedApplePie \u003d new FoodBuilder(APPLE_PIE).withDescription(VALID_DESCRIPTION_BREAD).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.isSameFood(editedApplePie));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // same description, same priority, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        editedApplePie \u003d new FoodBuilder(APPLE_PIE).withExpiryDate(VALID_EXPIRY_DATE_APPLE_PIE).withPriority(\"low\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(APPLE_PIE.isSameFood(editedApplePie));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        editedApplePie \u003d new FoodBuilder(APPLE_PIE).withPriority(VALID_PRIORITY_BREAD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(APPLE_PIE.isSameFood(editedApplePie));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // same description, same priority, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        editedApplePie \u003d new FoodBuilder(APPLE_PIE).withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(APPLE_PIE.isSameFood(editedApplePie));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Food aliceCopy \u003d new FoodBuilder(APPLE_PIE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(APPLE_PIE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(APPLE_PIE.equals(APPLE_PIE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.equals(BREAD));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        Food editedApplePie \u003d new FoodBuilder(APPLE_PIE).withDescription(VALID_DESCRIPTION_BREAD).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        editedApplePie \u003d new FoodBuilder(APPLE_PIE).withPriority(VALID_PRIORITY_BREAD).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        // different expiry date -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        editedApplePie \u003d new FoodBuilder(APPLE_PIE).withExpiryDate(VALID_EXPIRY_DATE_BREAD).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        editedApplePie \u003d new FoodBuilder(APPLE_PIE).withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 2,
      "SONGYI98": 5,
      "jonahtanjz": 13,
      "rolandyuwy": 48,
      "bchenghi": 24
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/food/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // null priority number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // invalid priority numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"91\")); // numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"priority\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        // valid priority numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"low\")); // low priority"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"medium\")); // medium priority"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"high\")); // high priority"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonahtanjz": 40
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/food/UniqueFoodListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.ANCHOVIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.BREAD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class UniqueFoodListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final UniqueFoodList uniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void contains_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void contains_foodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertFalse(uniqueFoodList.contains(ANCHOVIES));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void contains_foodInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(uniqueFoodList.contains(ANCHOVIES));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void contains_foodWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Food editedAnchovies \u003d new FoodBuilder(ANCHOVIES).withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertTrue(uniqueFoodList.contains(editedAnchovies));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void add_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void add_duplicateFood_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.add(ANCHOVIES));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood_nullTargetFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(null, ANCHOVIES));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood_nullEditedFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(ANCHOVIES, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood_targetFoodNotInList_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e uniqueFoodList.setFood(ANCHOVIES, ANCHOVIES));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood_editedFoodIsSameFood_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.setFood(ANCHOVIES, ANCHOVIES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        expectedUniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood_editedFoodHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        Food editedAnchovies \u003d new FoodBuilder(ANCHOVIES).withTags(VALID_TAG_WHOLEMEAL).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.setFood(ANCHOVIES, editedAnchovies);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        expectedUniqueFoodList.add(editedAnchovies);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood_editedFoodHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.setFood(ANCHOVIES, BREAD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        expectedUniqueFoodList.add(BREAD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFood_editedFoodHasNonUniqueIdentity_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(BREAD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.setFood(ANCHOVIES, BREAD));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void remove_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void remove_foodDoesNotExist_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e uniqueFoodList.remove(ANCHOVIES));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void remove_existingFood_removesFood() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.remove(ANCHOVIES);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoods_nullUniqueFoodList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFoods((UniqueFoodList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoods_uniqueFoodList_replacesOwnListWithProvidedUniqueFoodList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        expectedUniqueFoodList.add(BREAD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        uniqueFoodList.setFoods(expectedUniqueFoodList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFoods((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoods_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        uniqueFoodList.add(ANCHOVIES);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Collections.singletonList(BREAD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        uniqueFoodList.setFoods(foodList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        expectedUniqueFoodList.add(BREAD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setFoods_listWithDuplicateFoods_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        List\u003cFood\u003e listWithDuplicateFoods \u003d Arrays.asList(ANCHOVIES, ANCHOVIES);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.setFoods(listWithDuplicateFoods));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            -\u003e uniqueFoodList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonahtanjz": 3,
      "rolandyuwy": 131,
      "bchenghi": 33
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/storage/JsonAdaptedFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.storage.JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.BAGEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"T@na\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"MEDIUM-HIGH\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private static final String INVALID_EXPIRY_DATE \u003d \"1-13-2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private static final String INVALID_TAG \u003d \"^frozen\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BAGEL.getDescription().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private static final String VALID_PRIORITY \u003d BAGEL.getPriority().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private static final String VALID_EXPIRY_DATE \u003d BAGEL.getExpiryDate().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BAGEL.getTags().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(BAGEL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        assertEquals(BAGEL, food.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                new JsonAdaptedFood(INVALID_DESCRIPTION, VALID_PRIORITY, VALID_EXPIRY_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(null, VALID_PRIORITY, VALID_EXPIRY_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_DESCRIPTION, INVALID_PRIORITY, VALID_EXPIRY_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_DESCRIPTION, null, VALID_EXPIRY_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void toModelType_invalidExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_DESCRIPTION, VALID_PRIORITY, INVALID_EXPIRY_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        String expectedMessage \u003d ExpiryDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public void toModelType_nullExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_DESCRIPTION, VALID_PRIORITY, null, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ExpiryDate.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_DESCRIPTION, VALID_PRIORITY, VALID_EXPIRY_DATE, invalidTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 1,
      "SONGYI98": 13,
      "jonahtanjz": 8,
      "rolandyuwy": 14,
      "-": 41,
      "bchenghi": 11
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/storage/JsonFoodInventoryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.ANCHOVIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.HUMMUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.ICEBERG_LETTUCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class JsonFoodInventoryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonFoodInventoryStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void readFoodInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFoodInventory(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFoodInventory\u003e readFoodInventory(String filePath)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return new JsonFoodInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                .readFoodInventory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertFalse(readFoodInventory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFoodInventory("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"notJsonFormatFoodInventory.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void readFoodInventory_invalidFoodInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFoodInventory("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"invalidFoodInventory.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void readFoodInventory_invalidAndValidFoodInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFoodInventory("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"invalidAndValidFoodInventory.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void readAndSaveFoodInventory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFoodInventory.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory original \u003d getTypicalFoodInventory();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonFoodInventoryStorage jsonFoodInventoryStorage \u003d new JsonFoodInventoryStorage(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        jsonFoodInventoryStorage.saveFoodInventory(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ReadOnlyFoodInventory readBack \u003d jsonFoodInventoryStorage.readFoodInventory(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(original, new FoodInventory(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        original.addFood(HUMMUS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        original.removeFood(ANCHOVIES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        jsonFoodInventoryStorage.saveFoodInventory(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        readBack \u003d jsonFoodInventoryStorage.readFoodInventory(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(original, new FoodInventory(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        original.addFood(ICEBERG_LETTUCE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        jsonFoodInventoryStorage.saveFoodInventory(original); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        readBack \u003d jsonFoodInventoryStorage.readFoodInventory().get(); // file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(original, new FoodInventory(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void saveFoodInventory_nullFoodInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFoodInventory("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Saves {@code foodInventory} at the specified {@code filePath}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private void saveFoodInventory(ReadOnlyFoodInventory foodInventory, String filePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            new JsonFoodInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    .saveFoodInventory(foodInventory, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void saveFoodInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFoodInventory("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                new FoodInventory(), null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 112,
      "bchenghi": 6
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/storage/JsonSerializableFoodInventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.testutil.TypicalFood;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class JsonSerializableFoodInventoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            \"JsonSerializableFoodInventoryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final Path TYPICAL_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFoodInventory.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFoodInventory.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            \"duplicateFoodInventory.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void toModelType_typicalFoodFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonSerializableFoodInventory dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOOD_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                JsonSerializableFoodInventory.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory simplyKitchenInventoryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory typicalFoodSimplyKitchenInventory \u003d TypicalFood.getTypicalFoodInventory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(simplyKitchenInventoryFromFile, typicalFoodSimplyKitchenInventory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void toModelType_invalidFoodFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonSerializableFoodInventory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                JsonSerializableFoodInventory.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void toModelType_duplicateFood_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonSerializableFoodInventory dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOOD_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                JsonSerializableFoodInventory.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFoodInventory.MESSAGE_DUPLICATE_FOOD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 49
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        userPrefs.setFoodInventoryFilePath(Paths.get(\"foodInventory.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.TypicalFood.getTypicalFoodInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.ReadOnlyFoodInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        JsonFoodInventoryStorage foodInventoryStorage \u003d new JsonFoodInventoryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storageManager \u003d new StorageManager(foodInventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void foodInventoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "         * {@link JsonFoodInventoryStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "         * {@link JsonFoodInventoryStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory original \u003d getTypicalFoodInventory();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storageManager.saveFoodInventory(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ReadOnlyFoodInventory retrieved \u003d storageManager.readFoodInventory().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(original, new FoodInventory(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void getFoodInventoryFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertNotNull(storageManager.getFoodInventoryFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 18,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/EditFoodDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A utility class to help with building EditFoodDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class EditFoodDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private EditFoodDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public EditFoodDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public EditFoodDescriptorBuilder(EditCommand.EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.descriptor \u003d new EditFoodDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns an {@code EditFoodDescriptor} with fields containing {@code food}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public EditFoodDescriptorBuilder(Food food) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        descriptor.setDescription(food.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        descriptor.setPriority(food.getPriority());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        descriptor.setExpiryDate(food.getExpiryDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        descriptor.setTags(food.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * Sets the {@code Description} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public EditFoodDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public EditFoodDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Sets the {@code ExpiryDate} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public EditFoodDescriptorBuilder withExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        descriptor.setExpiryDate(new ExpiryDate(expiryDate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFoodDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public EditFoodDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public EditFoodDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 5,
      "jonahtanjz": 5,
      "rolandyuwy": 63,
      "bchenghi": 5
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/FoodBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import seedu.simplykitchen.model.food.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import seedu.simplykitchen.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import seedu.simplykitchen.model.food.Priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Anchovies\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"medium\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public static final String DEFAULT_EXPIRY_DATE \u003d \"15-1-2022\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates a {@code FoodBuilder} with the default details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        expiryDate \u003d new ExpiryDate(DEFAULT_EXPIRY_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        description \u003d foodToCopy.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        priority \u003d foodToCopy.getPriority();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        expiryDate \u003d foodToCopy.getExpiryDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * Sets the {@code description} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public FoodBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     * Sets the {@code Priority} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public FoodBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "     * Sets the {@code ExpiryDate} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "    public FoodBuilder withExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        this.expiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return new Food(description, priority, expiryDate, tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 1,
      "SONGYI98": 8,
      "jonahtanjz": 8,
      "rolandyuwy": 57,
      "bchenghi": 8
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/FoodInventoryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A utility class to help with building FoodInventory objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " *     {@code FoodInventory ab \u003d new FoodInventoryBuilder().withFood(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodInventoryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private FoodInventory foodInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodInventoryBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodInventory \u003d new FoodInventory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodInventoryBuilder(FoodInventory foodInventory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.foodInventory \u003d foodInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Adds a new {@code Food} to the {@code FoodInventory} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodInventoryBuilder withFood(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        foodInventory.addFood(food);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FoodInventory build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return foodInventory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 34
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/FoodUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A utility class for Food."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FoodUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns an add command string for adding the {@code food}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static String getAddCommand(Food food) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFoodDetails(food);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the part of command string for the given {@code food}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static String getFoodDetails(Food food) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + food.getDescription().fullDescription + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        sb.append(PREFIX_PRIORITY + food.getPriority().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        sb.append(PREFIX_EXPIRY_DATE + food.getExpiryDate().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        food.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the part of command string for the given {@code EditFoodDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static String getEditFoodDescriptorDetails(EditCommand.EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                .append(description.fullDescription).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "        descriptor.getPriority().ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "                .append(priority.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "        descriptor.getExpiryDate().ifPresent(expiryDate -\u003e sb.append(PREFIX_EXPIRY_DATE).append(expiryDate.value)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 4,
      "jonahtanjz": 4,
      "rolandyuwy": 50,
      "bchenghi": 4
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the middle index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the last index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the food in the {@code model}\u0027s food list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static Food getFood(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/TypicalFood.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_DESCRIPTION_APPLE_PIE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BREAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_APPLE_PIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_BREAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_PRIORITY_APPLE_PIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_PRIORITY_BREAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_FROZEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "import static seedu.simplykitchen.logic.commands.CommandTestUtil.VALID_TAG_WHOLEMEAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.FoodInventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class TypicalFood {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final Food ANCHOVIES \u003d new FoodBuilder().withDescription(\"Anchovies\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withExpiryDate(\"1-1-2022\").withPriority(\"low\").withTags(\"raw\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final Food BAGEL \u003d new FoodBuilder().withDescription(\"Bagel\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withExpiryDate(\"1-2-2022\").withPriority(\"low\").withTags(\"sugar-free\", \"cheese\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final Food CARROT_CAKE \u003d new FoodBuilder().withDescription(\"Carrot Cake\").withPriority(\"low\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withExpiryDate(\"1-3-2022\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final Food DARK_CHOCOLATE \u003d new FoodBuilder().withDescription(\"Dark Chocolate\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withPriority(\"high\").withExpiryDate(\"1-6-2022\").withTags(\"85%\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final Food EGGS \u003d new FoodBuilder().withDescription(\"Eggs\").withPriority(\"high\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withExpiryDate(\"1-12-2022\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final Food FRENCH_FRIES \u003d new FoodBuilder().withDescription(\"French Fries\").withPriority(\"low\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withExpiryDate(\"31-1-2022\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final Food GINGER \u003d new FoodBuilder().withDescription(\"Ginger\").withPriority(\"low\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withExpiryDate(\"31-12-2022\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final Food HUMMUS \u003d new FoodBuilder().withDescription(\"Hummus\").withPriority(\"low\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withExpiryDate(\"12-12-2022\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "    public static final Food ICEBERG_LETTUCE \u003d new FoodBuilder().withDescription(\"Iceberg Lettuce\").withPriority(\"high\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withExpiryDate(\"12-12-2022\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    // Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final Food APPLE_PIE \u003d new FoodBuilder().withDescription(VALID_DESCRIPTION_APPLE_PIE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withPriority(VALID_PRIORITY_APPLE_PIE).withExpiryDate(VALID_EXPIRY_DATE_APPLE_PIE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            .withTags(VALID_TAG_FROZEN).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final Food BREAD \u003d new FoodBuilder().withDescription(VALID_DESCRIPTION_BREAD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "            .withPriority(VALID_PRIORITY_BREAD).withExpiryDate(VALID_EXPIRY_DATE_BREAD)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "            .withTags(VALID_TAG_WHOLEMEAL, VALID_TAG_FROZEN).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    public static final String KEYWORD_MATCHING_LETTUCE \u003d \"Lettuce\"; // A keyword that matches LETTUCE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    private TypicalFood() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "     * Returns an {@code FoodInventory} with all the typical Foods."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static FoodInventory getTypicalFoodInventory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        FoodInventory ab \u003d new FoodInventory();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (Food food : getTypicalFood()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ab.addFood(food);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFood() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ANCHOVIES, BAGEL, CARROT_CAKE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bchenghi"
        },
        "content": "                DARK_CHOCOLATE, EGGS, FRENCH_FRIES, GINGER));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 13,
      "jonahtanjz": 12,
      "rolandyuwy": 35,
      "bchenghi": 13
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final Index INDEX_FIRST_FOOD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final Index INDEX_SECOND_FOOD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static final Index INDEX_THIRD_FOOD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 12
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/simplykitchen/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package seedu.simplykitchen.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static seedu.simplykitchen.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import seedu.simplykitchen.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonahtanjz"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link #VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonahtanjz": 1,
      "rolandyuwy": 3,
      "-": 110
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c?import seedu.simplykitchen.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SONGYI98"
        },
        "content": "\u003c?import seedu.simplykitchen.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003cfx:root type\u003d\"seedu.simplykitchen.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SONGYI98": 1,
      "rolandyuwy": 1,
      "-": 5
    }
  }
]
