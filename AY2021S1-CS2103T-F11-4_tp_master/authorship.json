[
  {
    "path": ".github/pull_request_template.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "## Description"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Please include a summary of the change and which issue is fixed. Include details on which features have been implemented and are now available."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Fixes #"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "## Remarks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Add any additional remarks for others to take note of."
      }
    ],
    "authorContributionMap": {
      "tankangliang": 13
    }
  },
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F11-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F11-4/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "![Ui2](docs/images/Ui2.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "- This is a **brownfield team project done under NUS\u0027s CS2103T: Software Engineering**.\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  - It has been built up from an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details. This provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  - It is **written in OOP fashion**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  - It has **user and developer documentation**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  - For detailed documentation, please refer to the **[TBM Website](https://ay2021s1-cs2103t-f11-4.github.io/tp/)**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 1,
      "raysonkoh": 1,
      "tankangliang": 8,
      "qwoprocks": 1,
      "-": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "You can reach us at the email `university@rocketmail.com`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Tan Kang Liang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003cimg src\u003d\"images/tankangliang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](https://github.com/tankangliang)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "[[portfolio](team/tankangliang.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Role: In charge of deliverables and deadlines"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Updating of commands to support the editing and usage of Client class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add arguments tz/ and c/ and respective fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add tests for adding, updating, deleting clients"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "### Lim Ming Chong"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003cimg src\u003d\"images/qwoprocks.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](http://github.com/qwoprocks)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[[portfolio](team/qwoprocks.md)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Role: In charge of integration, repo maintenance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Creating the skeleton of the full project, and refactoring of relevant classes to support all Client functionality"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Drafting of new UML diagram for the projected changes to the application"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Lee En Hao"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cimg src\u003d\"images/leeenhao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](http://github.com/leeenhao)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[portfolio](team/leeenhao.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Role: In charge of documentation and scheduling"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Implementing the View command and relevant functionalities associated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Modification of GUI to fit the theme of TBM"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add tests for View command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Maintain a showcase of MVP funcationalities"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### raysonkoh"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003cimg src\u003d\"images/raysonkoh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](http://github.com/raysonkoh)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "[[portfolio](team/raysonkoh.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* Role: In charge of testing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Implementing the Country class and all associated functionality"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add command for adding country notes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add command for filtering by country"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add tests for filtering and adding country notes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### Ritesh Kumar"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cimg src\u003d\"images/rtshkmr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](http://github.com/rtshkmr)]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "[[portfolio](team/rtshkmr.md)]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Role: Team Lead, In charge of code quality"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Fill in implementation for Note class (flexible Note class)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add command for adding, deleting client notes"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add command for updating client notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add tests for adding, deleting, updating client notes"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 35,
      "rtshkmr": 3,
      "raysonkoh": 3,
      "tankangliang": 4,
      "qwoprocks": 3,
      "-": 29
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Purpose"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "This documentation specifies the architecture and deisgn decisions for the application, \u003cstrong\u003e\u003ci\u003eTravelling BusinessMan\u003c/i\u003e\u003c/strong\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Scope"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "This describes the software architecture and software design decisions for the implementation of \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e. The intended audience is the develeopers, designers and testers for the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ClientListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a client)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cClient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Client` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th client in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new client. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Step 4. The user now decides that adding the client was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the client being deleted)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**Target user profile**: Businesspeople who travel a lot"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* has a need to manage a significant number of clients that span multiple timezones"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**Value proposition**: Manages notes, client contact details and preferences across multiple countries and timezones"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| -------- | --------------------------------- | ---------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | potential user                    | see the App populated with sample data   | easily see how the App will look like when it is in use                |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user ready to start using the App | purge all current data                   | get rid of sample/experimental data I used to explore the app          |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                          | see usage instructions                   | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add contact details of business contacts |                                                                        |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add personal preferences of existing business contacts | keep track of them                                       |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add meeting notes after meeting with existing business contacts | keep track of my meetings                       |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add information on business deals and contract expiration dates | let TBM keep track of them                      |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | filter business contacts by country      |                                                                        |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add cultural or relevant notes regarding a specific country | refer to these notes in the future                  |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | view my previously added information regarding a country |                                                        |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | see and search for all my clients        | easily find and view information on my clients without having to go through the entire list |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "| `* * *`  | user                              | edit my clients\u0027 information           |                                                                        |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | save the information I enter             |                                                                        |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | transfer my data across different computers |                                                                     |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | manage the priority of business aspects regarding my clients (e.g. expiring contracts) |                          |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | receive suggestions on which clients to catch up on if I have not done so for quite long | maintain my relationship with my clients |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | view who is likely to be free in other timezones currently | contact them and catch up with them                  |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | delete a client                          | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | note down and be reminded when my clients have their noteworthy moments (dates) | congratulate them in a timely manner |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | long-time user                    | archive/hide unused data                 | not be distracted by irrelevant data                                   |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | manage my flight bookings across countries |                                                                      |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | manage my hotel bookings in a particular country |                                                                |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | visualize my flight and hotel bookings on a timeline |                                                            |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | filter business contacts by country and state |                                                                   |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | undo and redo                                 | correct my mistakes easily                                        |"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `*`      | user                              | hide private contact details             | minimize chance of someone else seeing them by accident                |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `*`      | user                              | find clients nearest to my current location   | find someone near me to meet                                      |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `*`      | user                              | customize the GUI   | make it more intuitive to use or more visually appealing                                    |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `*`      | proficient CLI user               | type out my emails straight from the application without moving to the browser | have a faster workflow           |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "(For all use cases below, the **System** is the `TBM` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC1 - Adding a Client**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1.  User meets secures a new business deal/client"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "2.  User attempts to add the all associated parties and their information into TBM."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "3.  User successfully adds the all new information into TBM."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* 2a. A party has a prior entry in TBM, which shows that User has a previous professional encounter with the party."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * 2a1. User does not add the new party as it will duplicate entries in the TBM."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * 2a2. User can choose to update/edit the client information instead."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC2 - Finding Clients**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1.  User requests to find a client."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "2.  TBM shows a list of clients that match user\u0027s query."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* 1a. The list of clients is empty."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC3 - Saving data**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "1.  User enters a valid command that alters data (E.g. \u003cu\u003e`adding a client (UC1)`\u003c/u\u003e)."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "2.  Modified data gets stored in the existing data file."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "3.  TBM shows a message indicating command has been executed successfully."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* 2a. An error occurred while saving the modified data to the existing data file."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    * 2a1. TBM reloads the data from the existing data file."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    * 2a2. TBM shows an error message."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC4 - Filtering by country**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. User inputs a country as filter."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "2. TBM shows all clients belonging to that country."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* 1a. Invalid country is given."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * 1a1. TBM shows an error message."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC5 - Clearing all entries from TBM**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1.  User requests to clear all entries."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "2.  TBM asks the user to confirm."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "3.  User confirms that they want to clear all entries."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "4.  TBM clears all entries."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* 1a. There are no entries."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* 3a. User decides not to clear all entries."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "1.  **TBM** should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "2.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "4.  **TBM** should be able to recover its previous stable state from the data file if it crashes."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "3.  The data file should be stored locally in a human-editable text file."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "4.  **TBM** should be used by a single user."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "5.  **TBM** should be able to hold up to 1000 business contacts without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "6.  **TBM** should be able to hold up to 5000 total client notes without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "7.  **TBM** can handle at most 10000 business contacts and at most 50000 total client notes."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "8.  **TBM** will only accept countries that are specified by the [ISO3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) specification."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "9.  **TBM** will only accept [GMT](https://en.wikipedia.org/wiki/Greenwich_Mean_Time) timezones."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "10. **TBM** is not required to validate that the timezone of a business contact correctly matches his/her country."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "11. **TBM** should retain all functionalities even when it is not connected to the internet."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "12. The size of the **TBM** _JAR_ file should not exceed 100Mb."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **TBM**: Initialism for Travelling BusinessMan"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Client**: Refers to a person whom the user is conducting his/her business with"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Business Contact**: Synonymous with **Client**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **GMT**: [Greenwich Mean Time](https://en.wikipedia.org/wiki/Greenwich_Mean_Time)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "### Deleting a client"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "1. Deleting a client while all clients are being shown"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "   1. Prerequisites: List all clients using the `list` command. Multiple clients in the list."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      Expected: No client is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 30,
      "rtshkmr": 13,
      "raysonkoh": 34,
      "tankangliang": 16,
      "qwoprocks": 55,
      "-": 318
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cdiv\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cimg src\u003d\"images/TBM.png\" width\u003d\"160px\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003ch3\u003e\u003ci\u003eWelcome to the Travelling BusinessMan User Guide!\u003c/i\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cstrong\u003e\u003ci\u003eTravelling BusinessMan\u003c/i\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e, is a companion that goes beyond being just a simple contact management application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e sorts and organises your clients for you, streamlines your workflow, improves business efficiency and so much more. All this is at the convenience of the Command-Line Interface. \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e does more than just tracking your clients!\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        This user guide will be a starting point for you in getting yourself oriented with how \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e works and how you can integrate it into your professional journey!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Quickstart"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cp\u003eBefore you start using \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e, \u003c/p\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Ensure you have Java 11"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Download the application file (.jar file) from [here](#https://github.com/AY2021S1-CS2103T-F11-4/tp/releases)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Move file to a directory of your choice and run `java -jar tbm.jar`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Type any command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. (Recommended) The [`help`](#Viewing-help-help) command will show a quick page of some commonly used commands to get you started quickly, if you are a new user of TBM"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "   * Type the **`help`** command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Alternatively, you can refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Viewing all saved clients: `list`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Shows a list of all persons in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Shows commonly used commands for TBM in a new help window, pressing Esc will close this window."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Adding a client: `client add`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Adds a new client to the app."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Format: `client add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COUNTRY_CODE tz/TIMEZONE`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* `client add 5 n/Katya p/98123456 e/katya@yahoo.com a/Vladivostok, Nevelskogo, bld. 15, appt. 256 c/RUS tz/GMT+3`\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  This adds a new client with name **Katya**, phone number **98123456**, email **katya@yahoo.com**, address **Vladivostok, Nevelskogo, bld. 15, appt. 256**, country **Russia**, timezone **GMT+3**."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### Viewing clients: `client view`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "View the client specified by the index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Format: `client view INDEX`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* `client view 2` Views information for client at index 2 of the list panel"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### Finding clients: `client find`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Finds clients whose names contain any of the given keywords, or whose country of residence contains any of the given keywords."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Format: `client find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* Only the name and country are searched."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* Clients matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo Russia` will return `Hans Gruber`, `Bo Yang`, `Alice Katya`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `client find katya` Finds all clients with names that matches **katya**."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `client find Russia` Finds all clients associated to the country of **Russia**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `client find Katya Russia` Finds all clients who are either named **katya** or are associated to **Russia**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Editing a client: `client edit`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Edits a client\u0027s information by their index in the list view."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Format: `client edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [c/COUNTRY_CODE] [tz/TIMEZONE]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* COUNTRY follows the ISO3166 Format of two-letter country codes. [List of country codes](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `client edit 5 n/Katya` Only edits **name**, other fields remain the same"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `client edit 4 n/Alek p/34842097 e/dcsdcr@nus.edu.sg` Edits **name**, **phone number** and **email**, other fields remain the same."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `client edit 3 c/JP tz/GMT+7` Edits **country** to Japan and **timezone** to GMT+7"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Deleting a client: `client delete`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Deletes a client by their index in the list view."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `client delete INDEX`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `client delete 5`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Automatically saved after every change."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Adding client notes: `client note add`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Format: `client note add CLIENT_INDEX [t/TAG] nt/NOTE_STRING`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `client note add 1 t/pref nt/wants meetings to be as short as possible (preferably 30 mins)`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `client note add 2 t/pref nt/prefers emails to calls`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `client note add 4 t/meeting nt/need to slowly convince him to sign the contract`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Deleting client notes: `client note delete`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Deletes a note of a client (denoted by client\u0027s index) by the note\u0027s index."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Format: `client note delete CLIENT_INDEX NOTE_INDEX`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given a list of notes:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client: 3"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Loves dogs [tag: pref]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Hates cats [tag: pref]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "`client note delete 3 2`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "The above command deletes the note regarding \"Hates cats\". The resulting information will look like"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client: 3"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Loves dogs [tag: pref]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Editing client notes: `client note edit`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Edits a note of a client (denoted by client\u0027s index) by the note\u0027s index."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Format: `client note edit CLIENT_INDEX NOTE_INDEX [nt/NOTE_STRING] [t/TAG]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given a list of notes:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client: 3"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Loves dogs [tag: pref]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Hates cats [tag: pref]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "3. Apprehensive of resigning contract [tag: meeting]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `client note edit 3 2 nt/Loves cats`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "The original note containing \"Hates cats\" will be changed to \"Loves cats\" while retaining its original tag. The resulting list will look like"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client: 3"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Loves dogs [tag: pref]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Loves cats [tag: pref]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "3. Apprehensive of resigning contract [tag: meeting]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Filtering clients by country: `country filter`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Filters the list of clients by a specified country."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `country filter c/COUNTRY_CODE`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* COUNTRY_CODE is a 2-letter country code that follows the ISO3166 specification. [List of country codes](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `country filter c/SG` Filters by contacts in Singapore"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `country filter c/RU` Filters by contacts in Russia"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "### Adding notes for a country: `country note`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `country note c/COUNTRY_CODE nt/NOTE_STRING`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* COUNTRY_CODE is a 2-letter country code that follows the ISO3166 specification. [List of country codes](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `country note c/SG nt/has one of the lowest coporate taxes in the world`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `country note c/CN nt/building good relations (guanxi) is important when conducting business here`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `country note c/IN nt/is world\u0027s fastest growing economy`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries: `clear`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Deletes all information from the application, you will start from a clean slate."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TBM home folder.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**List all clients** | `list`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Add client** | `client add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COUNTRY_CODE tz/TIMEZONE` \u003cbr\u003e e.g., `client add 5 n/Katya p/98123456 e/katya@yahoo.com a/Vladivostok, Nevelskogo, bld. 15, appt. 256 c/RUS tz/GMT+3`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Edit client** | `client edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [c/COUNTRY_CODE] [tz/TIMEZONE]`\u003cbr\u003e e.g.,`client edit 3 c/JP tz/GMT+7`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**View client** | `client view INDEX` \u003cbr\u003e e.g., `client view 2`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Find client** | `client find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `client find Hans`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**Delete client** | `client delete INDEX`\u003cbr\u003e e.g., `client delete 3`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Add client note** | `client note add CLIENT_INDEX t/TAG nt/NOTE_STRING` \u003cbr\u003e e.g., `client note add 4 t/meeting nt/need to slowly convince him to sign the contract`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Delete client note** | `client note delete CLIENT_INDEX NOTE_INDEX` \u003cbr\u003e e.g., `client note delete 3 2`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Edit client note** | `client note edit CLIENT_INDEX NOTE_INDEX [nt/NOTE_STRING] [t/TAG]` \u003cbr\u003e e.g., `client note edit 3 2 nt/Loves cats`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Filter by country** | `country filter c/COUNTRY_CODE` \u003cbr\u003e e.g., `country filter c/SG`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Add country note** | `country note c/COUNTRY nt/NOTE_STRING` \u003cbr\u003e e.g., `country note c/SG nt/people love to queue for things`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 35,
      "rtshkmr": 15,
      "raysonkoh": 18,
      "tankangliang": 81,
      "qwoprocks": 9,
      "-": 121
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "title: Travelling Businessman"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F11-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F11-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**Travelling Businessman is a desktop application for managing your client contact details, organized with a focus on their country of residence.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* If you are interested in using Travelling Businessman, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* If you are interested about developing Travelling Businessman, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/leeenhao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "title: Lee En Hao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "## Project: Travelling Businessman"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Travelling Businessman is a desktop application that manages notes and contacts across multiple"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "countries and timezones for businessmen who travels a lot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Ability to view specific client\u0027s information in detail."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dleeenhao\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003dLeeEnHao\u0026zR\u003dAY2021S1-CS2103T-F11-4%2Ftp%5Bmaster%5D\u0026zACS\u003d258.1984652947332\u0026zS\u003d2020-08-14\u0026zFS\u003d\u0026zU\u003d2020-10-14\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * New GUI features"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Capability to view each client information in detail"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * GUI theme and styling overhaul"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Improve GUI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Un-deprecate `list` command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added `client view` command section to user guide to document the changes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Add"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * Add “Adding a client” and \"Viewing help\" to use cases"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Contributed to forum discussion (examples: [\\#157](https://github.com/nus-cs2103-AY2021S1/forum/issues/157), [\\#116](https://github.com/nus-cs2103-AY2021S1/forum/issues/116), [\\#93](https://github.com/nus-cs2103-AY2021S1/forum/issues/93), [\\#55](https://github.com/nus-cs2103-AY2021S1/forum/issues/55), [\\#85](https://github.com/nus-cs2103-AY2021S1/forum/issues/85#issuecomment-682309177))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 27,
      "rtshkmr": 10
    }
  },
  {
    "path": "docs/team/qwoprocks.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "title: Lim Ming Chong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "## Project: Travelling Businessman"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Travelling Businessman is a desktop application that manages notes and contacts across multiple countries and timezones for businessmen who travels a lot. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 24 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **New Feature**: Added option to close help window using the Esc key"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dqwoprocks\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dqwoprocks\u0026tabRepo\u003dAY2021S1-CS2103T-F11-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Managed releases `v1.1` - `v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Created walking skeleton for `v1.2` (Pull request [\\#115](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/115))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Refactor all instances of `person` to `client` (Pull request [\\#116](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/116))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added documentation for the features `country note`, `clear`, and `exit` [\\#31](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/31)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added the list of user stories and labelled their priorities [\\#38](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/38)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added the use case for `clearing all entries` [\\#53](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/53)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#51](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/51), [\\#121](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/121), [\\#131](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/131), [\\#134](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/134), [\\#137](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/137), [\\#144](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/144), [\\#146](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/146)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Contributed to forum discussions (examples: [\\#36](https://github.com/nus-cs2103-AY2021S1/forum/issues/36), [\\#62](https://github.com/nus-cs2103-AY2021S1/forum/issues/62), [\\#71](https://github.com/nus-cs2103-AY2021S1/forum/issues/71), [\\#110](https://github.com/nus-cs2103-AY2021S1/forum/issues/110), [\\#126](https://github.com/nus-cs2103-AY2021S1/forum/issues/126), [\\#132](https://github.com/nus-cs2103-AY2021S1/forum/issues/132), [\\#145](https://github.com/nus-cs2103-AY2021S1/forum/issues/145), [\\#146](https://github.com/nus-cs2103-AY2021S1/forum/issues/146), [\\#169](https://github.com/nus-cs2103-AY2021S1/forum/issues/169), [\\#239](https://github.com/nus-cs2103-AY2021S1/forum/issues/239), [\\#295](https://github.com/nus-cs2103-AY2021S1/forum/issues/295), [\\#296](https://github.com/nus-cs2103-AY2021S1/forum/issues/296), [\\#316](https://github.com/nus-cs2103-AY2021S1/forum/issues/316))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Gave suggestions for other teams in the class (examples: [\\#309](https://github.com/nus-cs2103-AY2021S1/forum/issues/309))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Added a [GitHub action](https://github.com/cloudbees/plantuml-github-action) to automatically generates and commits images of UML diagrams when .puml files are changed"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 13,
      "qwoprocks": 23
    }
  },
  {
    "path": "docs/team/raysonkoh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "title: Rayson Koh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "## Project: Travelling Businessman"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Travelling Businessman is a desktop application that manages notes and contacts across multiple"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "countries and timezones for businessmen who travels a lot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * `country filter` command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * `country note add` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003drayson\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByAuthors\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003draysonkoh\u0026zR\u003dAY2021S1-CS2103T-F11-4%2Ftp%5Bmaster%5D\u0026zACS\u003d168\u0026zS\u003d2020-08-14\u0026zFS\u003drayson\u0026zU\u003d2020-10-14\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByAuthors\u0026zFR\u003dfalse)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Brainstorm user stories for `v1.1`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Translate user stories to issues in Github issue tracker"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Create follow-up issues relating to Country Note and Country Filter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Add `Deleting clients`, `Saving Data` and `Adding Notes` sections"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Update `Country Filter` and `Country Note Add` example usage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Add Non-Functional Requirements (NFR) section"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Add \"Saving Data\" use case"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (examples: [\\#121](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/121), [\\#125](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/125), [\\#134](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/134))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Contributed to forum discussions (examples: [\\#125](https://github.com/nus-cs2103-AY2021S1/forum/issues/125), [\\#161](https://github.com/nus-cs2103-AY2021S1/forum/issues/161))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Gradle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Junit 5.0"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 15,
      "raysonkoh": 24
    }
  },
  {
    "path": "docs/team/rtshkmr.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "title: Ritesh Kumar\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "## Project: Travelling Businessman"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Travelling Businessman is a desktop application that manages notes and contacts across multiple"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "countries and timezones for businessmen who travels a lot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * `Client Notes Command`: Notes associated to clients can be created."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed:** [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003drtshkmr\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Project management:**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PR reviews: #153 #149 #148 #131 #121"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PR approvals:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Managed project v1.1 to v1.2 on GitHub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      * Update ClientNoteAdd feature."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      * Update Help Instruction on command syntax."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 31
    }
  },
  {
    "path": "docs/team/tankangliang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "title: Tan Kang Liang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "## Project: Travelling Businessman"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Travelling Businessman is a desktop application that manages notes and contacts across multiple"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "countries and timezones for businessmen who travels a lot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * `Timezone` class that represents the timezone of a client"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Ability to add `Country` and `Timezone` to a client in `client add`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Ability to edit `Country` and `Timezone` of a client in `client edit`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dtankangliang\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zFR\u003dfalse\u0026zA\u003dtankangliang\u0026zR\u003dAY2021S1-CS2103T-F11-4%2Ftp%5Bmaster%5D\u0026zACS\u003d311.54761904761904\u0026zS\u003d2020-08-14\u0026zFS\u003dkang%20liang\u0026zU\u003d2020-10-14\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Managed project v1.1 to v1.2 on GitHub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added PR template"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added `Country` field to `Client`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added `Timezone` field to `Client`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    * Added documentation for the features `client note delete`, `client note update` and `country filter`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Update documentation for `client add` and `client edit`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    * Added `Glossary` for terms worth recording"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [#124](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/121), [#151](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/151)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Contributed to forum discussions (examples: [\\#24](https://github.com/nus-cs2103-AY2021S1/forum/issues/24), [\\#47](https://github.com/nus-cs2103-AY2021S1/forum/issues/47), [\\#63](https://github.com/nus-cs2103-AY2021S1/forum/issues/63), [\\#79](https://github.com/nus-cs2103-AY2021S1/forum/issues/79), [\\#121](https://github.com/nus-cs2103-AY2021S1/forum/issues/121), [\\#147](https://github.com/nus-cs2103-AY2021S1/forum/issues/147), [\\#182](https://github.com/nus-cs2103-AY2021S1/forum/issues/182), [\\#194](https://github.com/nus-cs2103-AY2021S1/forum/issues/194), [\\#240](https://github.com/nus-cs2103-AY2021S1/forum/issues/240), [\\#241](https://github.com/nus-cs2103-AY2021S1/forum/issues/241),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 13,
      "tankangliang": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ui \u003d new UiManager(logic, this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_CLIENTS_LISTED_OVERVIEW \u003d \"%1$d clients listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.widget.WidgetObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the content of the widget view box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return WidgetObject."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    WidgetObject getWidgetContent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of clients */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 8,
      "qwoprocks": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.widget.WidgetObject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public WidgetObject getWidgetContent() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return model.getWidgetContent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return model.getFilteredClientList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 5,
      "qwoprocks": 3,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Adds a client to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_COUNTRY + \"COUNTRY_CODE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_TIMEZONE + \"TIMEZONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_COUNTRY + \"SG \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_TIMEZONE + \"GMT+8 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Client toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Creates an ClientAddCommand to add the specified {@code Client}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientAddCommand(Client client) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        toAdd \u003d client;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (model.hasClient(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.addClient(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof ClientAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ClientAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 12,
      "qwoprocks": 11,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Deletes a client identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \": Deletes the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof ClientDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ClientDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 5,
      "qwoprocks": 9,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Edits the details of an existing client in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientEditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"[\" + PREFIX_COUNTRY + \"COUNTRY_CODE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"[\" + PREFIX_TIMEZONE + \"TIMEZONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final EditClientDescriptor editClientDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param index of the client in the filtered client list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param editClientDescriptor details to edit the client with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientEditCommand(Index index, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(editClientDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.editClientDescriptor \u003d new EditClientDescriptor(editClientDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates and returns a {@code Client} with the details of {@code clientToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * edited with {@code editClientDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assert clientToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Address updatedAddress \u003d editClientDescriptor.getAddress().orElse(clientToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country updatedCountry \u003d editClientDescriptor.getCountry().orElse(clientToEdit.getCountry());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Timezone updatedTimezone \u003d editClientDescriptor.getTimezone().orElse(clientToEdit.getTimezone());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editClientDescriptor.getTags().orElse(clientToEdit.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Client(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedCountry, updatedTimezone,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                updatedTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!(other instanceof ClientEditCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand e \u003d (ClientEditCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Stores the details to edit the client with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * corresponding field value of the client."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static class EditClientDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        private Country country;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        private Timezone timezone;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public EditClientDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public EditClientDescriptor(EditClientDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            setCountry(toCopy.country);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            setTimezone(toCopy.timezone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, country, timezone, tags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public void setCountry(Country country) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            this.country \u003d country;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public Optional\u003cCountry\u003e getCountry() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return Optional.ofNullable(country);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public void setTimezone(Timezone timezone) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public Optional\u003cTimezone\u003e getTimezone() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return Optional.ofNullable(timezone);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (!(other instanceof EditClientDescriptor)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            EditClientDescriptor e \u003d (EditClientDescriptor) other;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    \u0026\u0026 getCountry().equals(e.getCountry())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    \u0026\u0026 getTimezone().equals(e.getTimezone())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 39,
      "qwoprocks": 42,
      "-": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Finds and lists all clients in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientFindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Intializes a ClientFindCommand with a predicate of Client."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param predicate The predicate to filter Clients by."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientFindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof ClientFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 predicate.equals(((ClientFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 6,
      "tankangliang": 5,
      "qwoprocks": 5,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientNoteAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Adds a Client-specific Note to list of notes associated with a client."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client note add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note associated to a client \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"Parameters: INDEX \" + PREFIX_NOTE + \"NOTE_STRING\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + \"client note content\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_CLIENT_NOTE \u003d \"The client note already exists\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully added client note\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Note clientNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initializes a ClientNoteAddCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param targetIndex The index of the client whom the clientNote will be associated to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clientNote  The clientNote to be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteAddCommand(Index targetIndex, Note clientNote) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(clientNote);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.clientNote \u003d clientNote;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client clientToAddNoteTo \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (model.hasClientNote(clientToAddNoteTo, clientNote)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT_NOTE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.addClientNote(clientToAddNoteTo, clientNote);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS); // TODO: dynamically format success message"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!(other instanceof ClientNoteAddCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteAddCommand c \u003d (ClientNoteAddCommand) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.targetIndex.equals(c.targetIndex) \u0026\u0026 this.clientNote.equals(c.clientNote);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Views a client identified by its displayed index. Displayed on the widget view box."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientViewCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** Client command in the form client view index, where index points to the index of the client at current location"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    of the rendered */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client view\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \": Views the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String MESSAGE_VIEW_CLIENT_SUCCESS \u003d \"Viewing client: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ClientViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client clientToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        model.setWidgetContent(clientToView);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_CLIENT_SUCCESS, clientToView));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                || (other instanceof ClientViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ClientViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountryFilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Filters the client list based on their country."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryFilterCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"country filter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose country matches \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"the specified country-code and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Parameters: \" + PREFIX_COUNTRY + \"COUNTRY_CODE\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" c/SG\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_FILTER_CLIENT_BY_COUNTRY_SUCCESS \u003d \"Showing %1$s clients that are from: %2$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final ClientCountryMatchesInputCountryPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes CountryFilterCommand with a predicate of Client."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param predicate The Country predicate to filter clients by."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryFilterCommand(ClientCountryMatchesInputCountryPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                String.format(MESSAGE_FILTER_CLIENT_BY_COUNTRY_SUCCESS, model.getFilteredClientList().size(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                        predicate.getInputCountryStringRepresentation()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof CountryFilterCommand)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand c \u003d (CountryFilterCommand) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return predicate.equals(c.predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountryNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Adds a Country-specific Note."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"country note\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \": Adds a note that is associated with the user input country.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + PREFIX_COUNTRY + \"COUNTRY_CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + PREFIX_NOTE + \"NOTE_STRING\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" c/SG nt/likes laksa\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_COUNTRY_NOTE \u003d \"This country note already exists in TBM\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully added country note for %1$s: %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Note countryNote;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a CountryNoteCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country     The country where the countryNote will be associated to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The countryNote to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteCommand(Country country, Note countryNote) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNote);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryNote \u003d countryNote;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (model.hasCountryNote(country, countryNote)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COUNTRY_NOTE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        model.addCountryNote(country, countryNote);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, country, countryNote));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof CountryNoteCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand c \u003d (CountryNoteCommand) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return country.equals(c.country) \u0026\u0026 countryNote.equals(c.countryNote);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Lists all clients in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientFindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryFilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Different command type separators"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String CLIENT_TYPE \u003d \"client\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String COUNTRY_TYPE \u003d \"country\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Used for initial separation of command type and rest of command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandType\u003e\\\\S+)(?\u003crestOfCommand\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Pattern SECONDARY_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandType \u003d matcher.group(\"commandType\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String restOfCommand \u003d matcher.group(\"restOfCommand\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case CLIENT_TYPE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return parseClientCommands(restOfCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case COUNTRY_TYPE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return parseCountryCommands(restOfCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses input given that command is of COUNTRY_TYPE (starts with \"country\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param input user input with \"client\" stripped"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return command relating to client functions"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException if input does not conform to expected format"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Command parseCountryCommands(String input) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final Matcher secondaryMatcher \u003d SECONDARY_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!secondaryMatcher.matches()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String commandWord \u003d secondaryMatcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final String arguments \u003d secondaryMatcher.group(\"arguments\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        commandWord \u003d COUNTRY_TYPE + \" \" + commandWord;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case CountryNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case CountryFilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryFilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses input given that command is of CLIENT_TYPE (starts with \"client\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input user input with \"client\" stripped"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return command relating to client functions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws ParseException if input does not conform to expected format"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Command parseClientCommands(String input) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Matcher secondaryMatcher \u003d SECONDARY_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!secondaryMatcher.matches()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String commandWord \u003d secondaryMatcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String arguments \u003d secondaryMatcher.group(\"arguments\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        commandWord \u003d CLIENT_TYPE + \" \" + commandWord;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // todo: abstract away this parsing logic or use better regex matcher"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer stringTokenizer \u003d new StringTokenizer(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String nextWord \u003d stringTokenizer.nextToken();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (nextWord.equals(\"add\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            // gather rest of the arguments:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            while (stringTokenizer.hasMoreTokens()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                stringBuilder.append(stringTokenizer.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            commandWord +\u003d (\" \" + nextWord);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            arguments \u003d \" \" + stringBuilder.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case ClientNoteAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ClientNoteAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        case ClientViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return new ClientViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 4,
      "rtshkmr": 20,
      "raysonkoh": 34,
      "tankangliang": 51,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final Prefix PREFIX_COUNTRY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final Prefix PREFIX_TIMEZONE \u003d new Prefix(\"tz/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"nt/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "tankangliang": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new ClientAddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommandParser implements Parser\u003cClientAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns an ClientAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                        PREFIX_COUNTRY, PREFIX_TIMEZONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_COUNTRY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                PREFIX_TIMEZONE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Timezone timezone \u003d ParserUtil.parseTimezone(argMultimap.getValue(PREFIX_TIMEZONE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client client \u003d new Client(name, phone, email, address, country, timezone, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new ClientAddCommand(client);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 19,
      "qwoprocks": 5,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new ClientDeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientDeleteCommandParser implements Parser\u003cClientDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns a ClientDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientDeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new ClientEditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientEditCommandParser implements Parser\u003cClientEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientEditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns an ClientEditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_COUNTRY, PREFIX_TIMEZONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    ClientEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor editClientDescriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            editClientDescriptor.setCountry(ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMEZONE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            editClientDescriptor.setTimezone(ParserUtil.parseTimezone(argMultimap.getValue(PREFIX_TIMEZONE).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editClientDescriptor::setTags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!editClientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(ClientEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new ClientEditCommand(index, editClientDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 21,
      "qwoprocks": 7,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new ClientFindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientFindCommandParser implements Parser\u003cClientFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientFindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns a ClientFindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new ClientFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 8,
      "qwoprocks": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientNoteAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Parses input arguments and creates a new ClientNoteAddCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteAddCommandParser implements Parser\u003cClientNoteAddCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param userInput The user input String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return A ClientNoteAddCommand corresponding to the input string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws ParseException If user input is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteAddCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, /* PREFIX_TAG,*/ PREFIX_NOTE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTE) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientNoteAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    ClientNoteAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        ClientNoteAddCommand.MESSAGE_USAGE))));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new ClientNoteAddCommand(index, clientNote);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Parses input arguments and creates a new ClientViewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientViewCommandParser implements Parser\u003cClientViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientViewCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * and returns a ClientViewCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ClientViewCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return new ClientViewCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CountryFilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryFilterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Parses input arguments and creates a new CountryFilterCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryFilterCommandParser implements Parser\u003cCountryFilterCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses the given {@code arg} of arguments in the context of the CountryFilterCommand and returns a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * CountryFilterCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param args The user input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A CountryFilterCommand object which corresponds to the user input string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException If user input string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CountryFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String countryCode \u003d argMultimap.getValue(PREFIX_COUNTRY).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(countryCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CountryFilterCommand(new ClientCountryMatchesInputCountryPredicate(country));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CountryNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Parses input arguments and creates a new CountryNoteCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteCommandParser implements Parser\u003cCountryNoteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses the given {@code arg} of arguments in the context of the CountryNoteCommand and returns a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * CountryNoteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param args The user input string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A CountryNoteCommand object which corresponds to the user input string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException If user input string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COUNTRY, PREFIX_NOTE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isEmpty() || argMultimap.getValue(PREFIX_NOTE).isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CountryNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Note countryNote \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CountryNoteCommand(country, countryNote);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.CountryManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses {@code String rawCountryCode} into a {@code Country}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param rawCountryCode The raw countryCode."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country associated with the input country code."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException If countryCode is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static Country parseCountry(String rawCountryCode) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(rawCountryCode);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String trimmedCountryCode \u003d rawCountryCode.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!CountryManager.isValidCountryCode(trimmedCountryCode)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(Country.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new Country(trimmedCountryCode);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses {@code String timezone} into a {@code Timezone}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param timezone String to be parsed into timezone."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return The timezone associated with the input string."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws ParseException If timezone is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static Timezone parseTimezone(String timezone) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(timezone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String trimmedTimezone \u003d timezone.trim().toUpperCase();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!Timezone.isValidTimezone(trimmedTimezone)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(Timezone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Timezone(trimmedTimezone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses {@code String noteString} into a {@code Note}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param noteString The contents of the Note."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The Note representing the input noteString."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException If noteString is empty or null string."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static Note parseNote(String noteString) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(noteString);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String trimmedNoteString \u003d noteString.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (trimmedNoteString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new Note(noteString);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 1,
      "raysonkoh": 45,
      "tankangliang": 17,
      "qwoprocks": 4,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.UniqueClientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.tag.UniqueTagSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Duplicates are not allowed (by .isSameClient comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UniqueClientList clients;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UniqueTagSet tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags \u003d new UniqueTagSet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates an AddressBook using the Clients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the contents of the client list with {@code clients} and the contents of the tag set with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * the union over all client tags, then update client tag sets with unique tags."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.clients.setClients(clients);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e allClientTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Client client : clients) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            allClientTags.addAll(client.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.tags.setTags(allClientTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Client client : clients) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            replaceClientTagSet(client);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        setClients(newData.getClientList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    //// client-level operations"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clients.contains(client);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the client tag set with a set of matching unique tag objects."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void replaceClientTagSet(Client client) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e clientLocalTags \u003d client.getTags();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.addAll(clientLocalTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client.replaceTags(tags.getTags(clientLocalTags));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces client tag set and adds the client to the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * The client must not already exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        replaceClientTagSet(client);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients.add(client);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces {@code editedClient} tag set and then replaces the given client {@code target} in the list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * with {@code editedClient}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(editedClient);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        replaceClientTagSet(editedClient);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients.setClient(target, editedClient);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void removeClient(Client key) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients.remove(key);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clients.asUnmodifiableObservableList().size() + \" clients\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 clients.equals(((AddressBook) other).clients));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clients.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 56,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.widget.WidgetObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    boolean hasClient(Client client);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Deletes the given client. The client must exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void deleteClient(Client target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Sets the widget box contents to the given content."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void setWidgetContent(Object content);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Retrives the widget content object to be displayed in the widget."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return WidgetObject."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    WidgetObject getWidgetContent();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Adds the given client."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * {@code client} must not already exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void addClient(Client client);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Replaces the given client {@code target} with {@code editedClient}. {@code target} must exist in the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * address book. The client identity of {@code editedClient} must not be the same as another existing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * client in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void setClient(Client target, Client editedClient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    boolean hasCountryNote(Country country, Note countryNote);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    boolean hasClientNote(Client client, Note clientNote);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    void addCountryNote(Country country, Note countryNote);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void addClientNote(Client client, Note clientNote);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns an unmodifiable view of the filtered client list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Updates the filter of the filtered client list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 11,
      "rtshkmr": 4,
      "raysonkoh": 26,
      "qwoprocks": 9,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.CountryManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.widget.WidgetModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.widget.WidgetObject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final FilteredList\u003cClient\u003e filteredClients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryManager countryManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final WidgetModel widget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.widget \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryManager \u003d new CountryManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return addressBook.hasClient(client);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        addressBook.removeClient(target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setWidgetContent(Object content) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widget.setContent(content);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public WidgetObject getWidgetContent() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return widget.getWidgetContent();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        addressBook.setClient(target, editedClient);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean hasCountryNote(Country country, Note countryNote) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(country, countryNote);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryManager.hasCountryNote(country, countryNote);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean hasClientNote(Client target, Note clientNote) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(target, clientNote);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return target.hasClientNote(clientNote);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote(Country country, Note countryNote) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(country, countryNote);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryManager.addCountryNote(country, countryNote);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void addClientNote(Client target, Note clientNote) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(target, clientNote);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        target.addClientNote(clientNote);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of {@code"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * versionedAddressBook}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return filteredClients;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        filteredClients.setPredicate(predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 filteredClients.equals(other.filteredClients);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 11,
      "rtshkmr": 10,
      "raysonkoh": 25,
      "qwoprocks": 20,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an unmodifiable view of the clients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * This list will not contain any duplicate clients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cClient\u003e getClientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Client.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class Client {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final Timezone timezone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Set\u003cNote\u003e clientNotes \u003d new LinkedHashSet\u003c\u003e(); // todo: initialise this iff client has notes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Address address, Country country, Timezone timezone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                  Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Timezone getTimezone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return timezone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replace current tag objects with tag objects from {@code UniqueTagSet}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void replaceTags(Set\u003cTag\u003e uniqueTags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.addAll(uniqueTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Gets the list of client notes associated with this client."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return The list of client notes associated with this client."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Set\u003cNote\u003e getClientNotes() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Collections.unmodifiableSet(this.clientNotes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Adds a client note for this client."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clientNote The client note to be added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void addClientNote(Note clientNote) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(clientNote);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.clientNotes.add(clientNote);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Checks whether the client has a given note in collection or not."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clientNote The note, to be checked if client has it in collection."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return True if Client has that note in the collection."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean hasClientNote(Note clientNote) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return clientNotes.contains(clientNote);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if both clients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * This defines a weaker notion of equality between two clients."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean isSameClient(Client otherClient) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (otherClient \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return otherClient !\u003d null"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 (otherClient.getPhone().equals(getPhone()) || otherClient.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if both clients have the same identity and data fields."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * This defines a stronger notion of equality between two clients."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client otherClient \u003d (Client) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 otherClient.getCountry().equals(getCountry())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 otherClient.getTimezone().equals(getTimezone())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return Objects.hash(name, phone, email, address, country, timezone, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(\" Country: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(getCountry())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(\" Timezone: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(getTimezone())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 34,
      "raysonkoh": 1,
      "tankangliang": 21,
      "qwoprocks": 26,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/ClientCountryMatchesInputCountryPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Country} matches the given Country."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ClientCountryMatchesInputCountryPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes with the country to be matched."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country The country to be matched"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ClientCountryMatchesInputCountryPredicate(Country country) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return client.getCountry().equals(country);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns string representation of user-input country."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The string representation of the user-input country."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getInputCountryStringRepresentation() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return country.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                || (other instanceof ClientCountryMatchesInputCountryPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \u0026\u0026 country.equals(((ClientCountryMatchesInputCountryPredicate) other).country)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Timezone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Represents a Client\u0027s timezone in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTimezone(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Timezone {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            \"Timezone should be in the form \\\"GMT+X\\\" or \\\"GMT-X\\\" where X is a number.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"Largest offset is GMT+14 and smallest offset is GMT-12\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /** Timezone must start with \"GMT\" */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^GMT(?\u003csign\u003e[+-])(?\u003cnumber\u003e[\\\\d]+)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Pattern TIMEZONE_FORMAT \u003d Pattern.compile(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final int SMALLEST_NEGATIVE_OFFSET \u003d 12;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final int LARGEST_POSITIVE_OFFSET \u003d 14;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Constructs a {@code Timezone}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param timezone A valid timezone."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Timezone(String timezone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(timezone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        checkArgument(isValidTimezone(timezone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        value \u003d timezone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns true if a given string is a valid timezone."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static boolean isValidTimezone(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final Matcher matcher \u003d TIMEZONE_FORMAT.matcher(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            matcher.find();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final String sign \u003d matcher.group(\"sign\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final String numberString \u003d matcher.group(\"number\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            if (numberString.length() \u003e 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final int number \u003d Integer.parseInt(numberString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final int offset \u003d sign.equals(\"+\") ? LARGEST_POSITIVE_OFFSET : SMALLEST_NEGATIVE_OFFSET;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            if (number \u003c\u003d offset) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof Timezone // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 value.equals(((Timezone) other).value)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/UniqueClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A list of clients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A client is considered unique by comparing using {@code Client#isSameClient(Client)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * clients uses Client#isSameClient(Client) for equality so as to ensure that the client being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * unique in terms of identity in the UniqueClientList. However, the removal of a client uses Client#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * as to ensure that the client with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * @see Client#isSameClient(Client)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class UniqueClientList implements Iterable\u003cClient\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if the list contains an equivalent client as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean contains(Client toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameClient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Adds a client to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * The client must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void add(Client toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!target.isSameClient(editedClient) \u0026\u0026 contains(editedClient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalList.set(index, editedClient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Removes the equivalent client from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * The client must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void remove(Client toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients(UniqueClientList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the contents of this list with {@code clients}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(clients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!clientsAreUnique(clients)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalList.setAll(clients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cClient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Iterator\u003cClient\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                || (other instanceof UniqueClientList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueClientList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if {@code clients} contains only unique clients."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private boolean clientsAreUnique(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (int i \u003d 0; i \u003c clients.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (int j \u003d i + 1; j \u003c clients.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                if (clients.get(i).isSameClient(clients.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Signals that the operation is unable to find the specified client."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Signals that the operation will result in duplicate Clients (Clients are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class DuplicateClientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public DuplicateClientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        super(\"Operation would result in duplicate clients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/country/Country.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A representation of a Country that can be identified by a 2-letter ISO3166 country-code or by its country"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * name. It contains a list of country notes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Country code must be a valid 2-letter ISO3166 country code\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String countryName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String countryCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a Country by its countryCode."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryCode The ISO3166 2-letter country code of the country to be initialized."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Country(String countryCode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryCode \u003d countryCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryName \u003d new Locale(\"\", countryCode).getDisplayName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the country name of this country."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country name of this country."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getCountryName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the country code of this country."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country code of this country."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getCountryCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof Country)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country c \u003d (Country) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return countryCode.equals(c.countryCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return countryCode.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryName + \" (\" + countryCode + \")\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 59,
      "tankangliang": 10,
      "qwoprocks": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/country/CountryManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A high-level class responsible for mapping ISO3166 2-letter country codes to countries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    //TODO: Should include checking for 3-letter Country Code?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Map\u003cCountry, Set\u003cNote\u003e\u003e countryNotesMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a CountryManager with a Map that maps ISO3166 2-letter country codes to countries."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesMap \u003d initCountryNotesMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks if countryCode is a valid ISO3166 code."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryCode The country code."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Whether countryCode is a valid ISO3166 code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static boolean isValidCountryCode(String countryCode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c COUNTRY_CODES.length; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (COUNTRY_CODES[i].equals(countryCode)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes mapping from country to its countryNotes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The Mapping from country to its countryNotes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static Map\u003cCountry, Set\u003cNote\u003e\u003e initCountryNotesMap() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Map\u003cCountry, Set\u003cNote\u003e\u003e newCountryNotesMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            newCountryNotesMap.put(new Country(countryCode), new LinkedHashSet\u003c\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return newCountryNotesMap;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks if {@code country} contains {@code countryNote}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country     The country to be checked."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The note to be checked."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Whether {@code country} contains {@code countryNote}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean hasCountryNote(Country country, Note countryNote) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!countryNotesMap.containsKey(country)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryNotesMap.get(country).contains(countryNote);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds the {@code countryNote} to the {@code country}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country     The country where the countryNote will be added."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The country note to be added."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote(Country country, Note countryNote) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!countryNotesMap.containsKey(country)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesMap.get(country).add(countryNote);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Generic Note class for country and client notes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"message contraints for note\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    protected final String noteContents;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Constructs a Note object with some content in it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param content to be added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Note(String content) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        noteContents \u003d content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!(obj instanceof Note)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note c \u003d (Note) obj;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.noteContents.equals(c.noteContents);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return noteContents;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Objects.hash(noteContents);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 24,
      "raysonkoh": 21,
      "qwoprocks": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A set of tags that not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#equals(Object)}, which compares tagNames."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Supports some set operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class UniqueTagSet implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableSet\u003cTag\u003e internalSet \u003d FXCollections.observableSet();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Set\u003cTag\u003e internalUnmodifiableSet \u003d FXCollections.unmodifiableObservableSet(internalSet);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if the set contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalSet.contains(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Union with another tag set."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addAll(Set\u003cTag\u003e toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalSet.addAll(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an unmodifiable set of unique tag objects from the backing set that match the set of tags passed in."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param toGet The set of tag objects to get"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @return An unmodifiable set containing the unique tag objects"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Set\u003cTag\u003e getTags(Set\u003cTag\u003e toGet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(toGet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalSet.stream().filter(toGet::contains).collect(Collectors.toUnmodifiableSet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the contents of this set with {@code tags}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalSet.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalSet.addAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the backing set as an unmodifiable {@code Set}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Set\u003cTag\u003e asUnmodifiableSet() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalUnmodifiableSet;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalSet.iterator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                || (other instanceof UniqueTagSet // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 internalSet.equals(((UniqueTagSet) other).internalSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalSet.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static Client[] getSampleClients() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new Client[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Country(\"SG\"), new Timezone(\"GMT+8\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Country(\"SG\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Timezone(\"GMT+8\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Country(\"SG\"), new Timezone(\"GMT+8\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Country(\"SG\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Timezone(\"GMT+8\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Country(\"SG\"), new Timezone(\"GMT+8\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Country(\"SG\"), new Timezone(\"GMT+8\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Client sampleClient : getSampleClients()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            sampleAb.addClient(sampleClient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 10,
      "qwoprocks": 15,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/widget/WidgetModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.model.widget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * This is the api for interacting with the proposed View Box widget in the TBM application. The view box widget model"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * is encapsulated within the TBM model itself."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * v1.2 - display contents are limited to objects of Client type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * v1.3 - ???"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public interface WidgetModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Static factory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return WidgetModel implemented by WidgetModelMoanager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    static WidgetModel initWidget() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return WidgetModelManager.initWidget();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Sets the content to be displayed in the view box to be of that content."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void setContent(Object content);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the widget content object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return WidgetObject"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    WidgetObject getWidgetContent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/widget/WidgetModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.model.widget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * This is a separate model manager that separately manages the display contents of the proposed View Box left of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * the filtered client list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetModelManager implements WidgetModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private WidgetObject widgetObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private WidgetModelManager() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    static WidgetModelManager initWidget() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModelManager view \u003d new WidgetModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        view.defaultContent();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new WidgetModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * \u003cp\u003eSets the content to be displayed in the view box to be of that content. Break down the content into a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * standardised format in specified in {@code WidgetOject}.\u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * \u003cp\u003eIn creating the widget object, the values for each of the widget object fields can be set to a String value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * In order to do so, the targeted object to be displayed, needs to have its contents/fields/members stringified."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * After stringifying the attributes, call {@link WidgetObject#set(String...) set}, where args is an ordered set of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Strings. Hence, the first String will be set as the value for the header field of the widget object, the second"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * String will be set to the div1 field of the widget object so on and so forth.\u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setContent(Object content) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (content instanceof Client) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            widgetObject \u003d clientParser((Client) content);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            widgetObject \u003d handle(content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the widget content object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return WidgetObject."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public WidgetObject getWidgetContent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return widgetObject;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Stub for the default content rendered on the widget."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void defaultContent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // TODO: Initialise the widget to a default content - weather, locale, local time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject wo \u003d new WidgetObject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        wo.set(\"Hello World! This is a header!\", \"Div 1\", \"Div2\", \"Div 3\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \"Div 4\", \"Div 5\", \"Div 6\", \"Copyright@ArthurBarbavsky\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetObject \u003d wo;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Maps content of the given object to different fields of the widget object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private WidgetObject clientParser(Client client) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // TODO: Figure out an optimal display for all of client\u0027s fields"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject newObj \u003d new WidgetObject();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String name \u003d client.getName().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String location \u003d client.getAddress().toString() + \", \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                + client.getCountry().getCountryName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String timezone \u003d client.getTimezone().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String email \u003d client.getEmail().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String phone \u003d client.getPhone().toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String tags \u003d client.getTags().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        newObj.set(/*header*/ name, /*div1*/ location, /*text1*/ \"\", /*div2*/ \"\", /*text2*/ email,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                /*div3*/ phone, /*text3*/ \"\", /*div4*/ tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return newObj;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Fail safe method to change any unhandled object into a WidgetObject."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param content An object of any type, Country, Note,... etc that is not handled."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return WidgetObject."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private WidgetObject handle(Object content) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // TODO: v1.3 || v1.4 deprecate this method."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        java.util.logging.Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // Logs the unknown object being passed to this method"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        logger.info(String.valueOf(content.getClass()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject wo \u003d new WidgetObject();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        java.lang.reflect.Field[] fields \u003d content.getClass().getDeclaredFields();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        java.util.stream.Stream.of(fields).forEach(f -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                f.setAccessible(true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                String fieldName \u003d f.getName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                String fieldValue \u003d f.get(content).toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                logger.info(fieldName + \": \" + fieldValue);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder().append(fieldName).append(\": \").append(fieldValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                wo.set(sb.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } catch (IllegalAccessException ex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                // This path will never be reached"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                System.out.println(Arrays.toString(ex.getStackTrace()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return wo;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/widget/WidgetObject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.model.widget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A standardise way to render content on the widget view box."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Truncates anything that does not fit into the defined 8 divisions/sections for the displaying in the view box."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Defined format for fields to be displayed is:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003col\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eHeader\u003c/li\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eDiv 1\u003c/li\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eText 1\u003c/li\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eDiv 2\u003c/li\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eText 2\u003c/li\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eDiv 3\u003c/li\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eText 3\u003c/li\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eDiv 4\u003c/li\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eText 4\u003c/li\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eDiv 5\u003c/li\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eText 5\u003c/li\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eDiv 6\u003c/li\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eText 6\u003c/li\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *     \u003cli\u003eFooter\u003c/li\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003c/ol\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetObject {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final int NUMBER_OF_FIELDS \u003d 14;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Array is a collection of the fields to be mapped to the widget Ui component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * [header, div1, text1, div2, text2, div3, text3, div4, text4, div5, text5, div6, text6, footer]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final String[] divs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for a widget object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public WidgetObject() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        divs \u003d new String[14];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Sets the content of the widget object. Any fields not set will be an empty string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param args All the fields to be set."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void set(String... args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // Sets all fields from start to end order."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(args.length, NUMBER_OF_FIELDS); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            divs[i] \u003d args[i];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Sets the first null field to the given String value. Any fields not set will be an empty string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param arg The String value to be set to the first null field."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void set(String arg) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c divs.length; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (divs[i] \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                divs[i] \u003d arg;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Header."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String header() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[0] \u003d\u003d null ? \"\" : divs[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Div1."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String divOne() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[1] \u003d\u003d null ? \"\" : divs[1];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Text1."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String textOne() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[2] \u003d\u003d null ? \"\" : divs[2];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Div2."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String divTwo() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[3] \u003d\u003d null ? \"\" : divs[3];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Text2."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String textTwo() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[4] \u003d\u003d null ? \"\" : divs[4];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Div3."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String divThree() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[5] \u003d\u003d null ? \"\" : divs[5];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Text3."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String textThree() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[6] \u003d\u003d null ? \"\" : divs[6];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Div4."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String divFour() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[7] \u003d\u003d null ? \"\" : divs[7];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Text4."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String textFour() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[8] \u003d\u003d null ? \"\" : divs[8];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Div5."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String divFive() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[9] \u003d\u003d null ? \"\" : divs[9];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Text5."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String textFive() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[10] \u003d\u003d null ? \"\" : divs[10];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Div6."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String divSix() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[11] \u003d\u003d null ? \"\" : divs[11];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Text6."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String textSix() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[12] \u003d\u003d null ? \"\" : divs[12];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Getter for \u0027attributes\u0027."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Footer."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String footer() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return divs[13] \u003d\u003d null ? \"\" : divs[13];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!(other instanceof WidgetObject)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject other1 \u003d (WidgetObject) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return Arrays.equals(this.divs, other1.divs);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 213
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.CountryManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Jackson-friendly version of {@link Client}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "class JsonAdaptedClient {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final String country;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final String timezone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Constructs a {@code JsonAdaptedClient} with the given client details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                             @JsonProperty(\"country\") String country, @JsonProperty(\"timezone\") String timezone,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Converts a given {@code Client} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public JsonAdaptedClient(Client source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        country \u003d source.getCountry().getCountryCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        timezone \u003d source.getTimezone().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Converts this Jackson-friendly adapted client object into the model\u0027s {@code Client} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted client."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Client toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final List\u003cTag\u003e clientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            clientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (country \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Country.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!CountryManager.isValidCountryCode(country)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new IllegalValueException(Country.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Country modelCountry \u003d new Country(country);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (timezone \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    Timezone.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!Timezone.isValidTimezone(timezone)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new IllegalValueException(Timezone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Timezone modelTimezone \u003d new Timezone(timezone);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(clientTags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Client(modelName, modelPhone, modelEmail, modelAddress, modelCountry, modelTimezone, modelTags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 1,
      "tankangliang": 27,
      "qwoprocks": 18,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCountry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Jackson-friendly version of {@link Country}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class JsonAdaptedCountry {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    TODO: Update to match Country class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    private final String tagName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    @JsonValue"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    public String getTagName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        return tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        return new Tag(tagName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "class JsonAdaptedNote {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    TODO: Update to match Note class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    private final String tagName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    @JsonValue"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    public String getTagName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        return tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//        return new Tag(tagName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Clients list contains duplicate client(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given clients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.clients.addAll(clients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (JsonAdaptedClient jsonAdaptedClient : clients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Client client \u003d jsonAdaptedClient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (addressBook.hasClient(client)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            addressBook.addClient(client);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String FXML \u003d \"ClientListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public final Client client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Label country;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Label timezone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates a {@code ClientCode} with the given {@code Client} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        name.setText(client.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        phone.setText(client.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        address.setText(client.getAddress().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        email.setText(client.getEmail().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        country.setText(client.getCountry().getCountryName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        timezone.setText(client.getTimezone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!(other instanceof ClientCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientCard card \u003d (ClientCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 client.equals(card.client);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 6,
      "qwoprocks": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Panel containing the list of clients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String FXML \u003d \"ClientListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private ListView\u003cClient\u003e clientListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates a {@code ClientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientListView.setItems(clientList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code ClientCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    class ClientListViewCell extends ListCell\u003cClient\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        protected void updateItem(Client client, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            super.updateItem(client, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (empty || client \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                setGraphic(new ClientCard(client, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f11-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String USERGUIDE_MESSAGE \u003d \"For more information, refer to the user guide: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String HELP_TITLE \u003d \"Commonly used commands\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String COMMON_COMMANDS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \"client add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COUNTRY tz/TIMEZONE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \"client view INDEX\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"client find KEYWORD [MORE_KEYWORDS]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"client edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [c/COUNTRY] [tz/TIMEZONE]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"client delete INDEX\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"client note add CLIENT_INDEX t/TAG nt/NOTE_STRING\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"client note delete CLIENT_INDEX NOTE_INDEX\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"client note update CLIENT_INDEX NOTE_INDEX NOTE_STRING t/TAG\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"country filter c/COUNTRY_CODE\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"country note c/COUNTRY_CODE nt/NOTE_STRING\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Label helpTitle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Label commonCommands;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Label userGuideMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Hyperlink userGuideUrl;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root    Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param mainApp The main application instance, used for the getHostServices() method."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public HelpWindow(Stage root, MainApp mainApp) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        helpTitle.setText(HELP_TITLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        commonCommands.setText(COMMON_COMMANDS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        userGuideMessage.setText(USERGUIDE_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        userGuideUrl.setText(USERGUIDE_URL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        userGuideUrl.setOnAction(t -\u003e mainApp.getHostServices().showDocument(userGuideUrl.getText()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Hides the help window when the Esc key is pressed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        root.addEventHandler(KeyEvent.KEY_PRESSED, keyEvent -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (keyEvent.getCode() \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                this.hide();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public HelpWindow(MainApp mainApp) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this(new Stage(), mainApp);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "rtshkmr": 1,
      "raysonkoh": 2,
      "qwoprocks": 42,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private ClientListPanel clientListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private WidgetViewBox widgetViewBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private StackPane clientListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, MainApp mainApp) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        helpWindow \u003d new HelpWindow(mainApp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientListPanel getClientListPanel() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clientListPanel;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "qwoprocks": 9,
      "-": 188
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/TBM.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private MainApp mainApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public UiManager(Logic logic, MainApp mainApp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, mainApp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "qwoprocks": 4,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WidgetViewBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.widget.WidgetObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * An Ui component that displays the information of {@code WidgetObject}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetViewBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String FXML \u003d \"WidgetViewBox.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final WidgetObject widgetObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private VBox viewBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label divOne;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label textOne;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label divTwo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label textTwo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label divThree;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label textThree;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label divFour;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label textFour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label divFive;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label textFive;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label divSix;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label textSix;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label footer;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Creates a {@code WidgetViewBox} with the given {@code WidgetObject}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public WidgetViewBox(WidgetObject widgetObject) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.widgetObject \u003d widgetObject;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        header.setText(widgetObject.header());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        divOne.setText(widgetObject.divOne());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        divTwo.setText(widgetObject.divTwo());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        divThree.setText(widgetObject.divThree());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        divFour.setText(widgetObject.divFour());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        divFive.setText(widgetObject.divFive());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        divSix.setText(widgetObject.divSix());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textOne.setText(widgetObject.textOne());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textTwo.setText(widgetObject.textTwo());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textThree.setText(widgetObject.textThree());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textFour.setText(widgetObject.textFour());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textFive.setText(widgetObject.textFive());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textSix.setText(widgetObject.textSix());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        footer.setText(widgetObject.footer());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!(other instanceof WidgetViewBox)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetViewBox other1 \u003d (WidgetViewBox) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return widgetObject.equals(other1.widgetObject);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 84
    }
  },
  {
    "path": "src/main/resources/view/ClientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \u003cLabel fx:id\u003d\"country\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$country\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \u003cLabel fx:id\u003d\"timezone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timezone\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/ClientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  \u003cListView fx:id\u003d\"clientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help [Press Esc to close]\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" fx:id\u003d\"helpContent\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003cLabel fx:id\u003d\"helpTitle\" styleClass\u003d\"label-bright\" text\u003d\"Label\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cLabel fx:id\u003d\"commonCommands\" text\u003d\"Label\" HBox.hgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cLabel fx:id\u003d\"userGuideMessage\" styleClass\u003d\"label-bright\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cHyperlink fx:id\u003d\"userGuideUrl\" styleClass\u003d\"text-field\" text\u003d\"Hyperlink\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003c/Hyperlink\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 34,
      "-": 28
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         title\u003d\"Travelling BusinessMan\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cImage url\u003d\"@/images/TBM.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        \u003cVBox fx:id\u003d\"clientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "          \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 2,
      "qwoprocks": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/resources/view/WidgetViewBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            fx:controller\u003d\"\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final Index fifthClientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(fifthClientIndex.equals(fifthClientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(fifthClientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(fifthClientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(fifthClientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String deleteCommand \u003d \"client delete 9\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String addCommand \u003d ClientAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_AMY + COUNTRY_DESC_AMY + TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.addClient(expectedClient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 6,
      "qwoprocks": 9,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ClientAddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_newClient_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.addClient(validClient);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(new ClientAddCommand(validClient), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                String.format(ClientAddCommand.MESSAGE_SUCCESS, validClient), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientInList \u003d model.getAddressBook().getClientList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(new ClientAddCommand(clientInList), model, ClientAddCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 5,
      "qwoprocks": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.widget.WidgetObject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientAddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CommandResult commandResult \u003d new ClientAddCommand(validClient).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(String.format(ClientAddCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Arrays.asList(validClient), modelStub.clientsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand addCommand \u003d new ClientAddCommand(validClient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithClient(validClient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ClientAddCommand.MESSAGE_DUPLICATE_CLIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand addAliceCommand \u003d new ClientAddCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand addBobCommand \u003d new ClientAddCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand addAliceCommandCopy \u003d new ClientAddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         * Sets the widget box contents to the given content."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         * @param content"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public void setWidgetContent(Object content) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new AssertionError(\"this method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public WidgetObject getWidgetContent() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public boolean hasCountryNote(Country country, Note countryNote) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        public boolean hasClientNote(Client client, Note clientNote) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public void addCountryNote(Country country, Note countryNote) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        public void addClientNote(Client client, Note clientNote) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * A Model stub that contains a single client."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private class ModelStubWithClient extends ModelStub {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private final Client client;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ModelStubWithClient(Client client) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            this.client \u003d client;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return this.client.isSameClient(client);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * A Model stub that always accept the client being added."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private class ModelStubAcceptingClientAdded extends ModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final ArrayList\u003cClient\u003e clientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return clientsAdded.stream().anyMatch(client::isSameClient);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            clientsAdded.add(client);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 14,
      "rtshkmr": 10,
      "raysonkoh": 12,
      "tankangliang": 10,
      "qwoprocks": 37,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * {@code ClientDeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientDeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand clientDeleteCommand \u003d new ClientDeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientDeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand clientDeleteCommand \u003d new ClientDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(clientDeleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand clientDeleteCommand \u003d new ClientDeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientDeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showNoClient(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand clientDeleteCommand \u003d new ClientDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(clientDeleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand deleteFirstCommand \u003d new ClientDeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand deleteSecondCommand \u003d new ClientDeleteCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand deleteFirstCommandCopy \u003d new ClientDeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void showNoClient(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(model.getFilteredClientList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 15,
      "qwoprocks": 19,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * and unit tests for ClientEditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientEditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(indexLastClient, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.setClient(lastClient, editedClient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT, new EditClientDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d new ClientBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client firstClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(firstClient).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand editCommand \u003d new ClientEditCommand(INDEX_SECOND_CLIENT, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(editCommand, model, ClientEditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClientFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // edit client in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientInList \u003d model.getAddressBook().getClientList().get(INDEX_SECOND_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new EditClientDescriptorBuilder(clientInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(clientEditCommand, model, ClientEditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_invalidClientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand editCommand \u003d new ClientEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_invalidClientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(clientEditCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final ClientEditCommand standardCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT, DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand.EditClientDescriptor copyDescriptor \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand commandWithSameValues \u003d new ClientEditCommand(INDEX_FIRST_CLIENT, copyDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClientEditCommand(INDEX_SECOND_CLIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClientEditCommand(INDEX_FIRST_CLIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 34,
      "qwoprocks": 36,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ClientFindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientFindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand findFirstCommand \u003d new ClientFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand findSecondCommand \u003d new ClientFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand findFirstCommandCopy \u003d new ClientFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_zeroKeywords_noClientFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand command \u003d new ClientFindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredClientList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_multipleKeywords_multipleClientsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand command \u003d new ClientFindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredClientList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 7,
      "qwoprocks": 15,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientNoteAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.testutil.TypicalClients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteAddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_1 \u003d \"client note content 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_2 \u003d \"client note content 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_3 \u003d \"client note content 3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_duplicateClientNote_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d TypicalClients.ALICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index idx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.addClientNote(client, clientNote);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteAddCommand clientNoteAddCommand \u003d new ClientNoteAddCommand(idx, clientNote);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e clientNoteAddCommand.execute(model));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_notDuplicateClientNote_successfullyAddsClientNote() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Client client \u003d TypicalClients.ALICE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Index idx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Note clientNote2 \u003d new Note(NOTE_CONTENT_2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Note clientNote3 \u003d new Note(NOTE_CONTENT_3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            assertFalse(model.hasClientNote(client, clientNote2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ClientNoteAddCommand clientNoteAddCommand2 \u003d new ClientNoteAddCommand(idx, clientNote2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ClientNoteAddCommand clientNoteAddCommand3 \u003d new ClientNoteAddCommand(idx, clientNote3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            clientNoteAddCommand2.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            clientNoteAddCommand3.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            assertTrue(model.hasClientNote(client, clientNote2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            assertTrue(model.hasClientNote(client, clientNote3));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientViewCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    //TODO: Implement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client clientToView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand command \u003d new ClientViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String expectedMsg \u003d String.format(ClientViewCommand.MESSAGE_VIEW_CLIENT_SUCCESS, clientToView);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        expectedModel.setWidgetContent(clientToView);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCommandSuccess(command, model, expectedMsg, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand clientViewCommand \u003d new ClientViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCommandFailure(clientViewCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client clientToView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand clientViewCommand \u003d new ClientViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String expectedMessage \u003d String.format(ClientViewCommand.MESSAGE_VIEW_CLIENT_SUCCESS, clientToView);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        showClientAtIndex(expectedModel, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        expectedModel.setWidgetContent(clientToView);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCommandSuccess(clientViewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand clientViewCommand \u003d new ClientViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCommandFailure(clientViewCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand viewFirstCommand \u003d new ClientViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand viewSecondCommand \u003d new ClientViewCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand viewFirstCommandCopy \u003d new ClientViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_COUNTRY_AMY \u003d \"SG\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_COUNTRY_BOB \u003d \"MY\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_TIMEZONE_AMY \u003d \"GMT+8\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_TIMEZONE_BOB \u003d \"GMT+7\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COUNTRY_DESC_AMY \u003d \" \" + PREFIX_COUNTRY + VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COUNTRY_DESC_BOB \u003d \" \" + PREFIX_COUNTRY + VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String TIMEZONE_DESC_AMY \u003d \" \" + PREFIX_TIMEZONE + VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String TIMEZONE_DESC_BOB \u003d \" \" + PREFIX_TIMEZONE + VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String INVALID_COUNTRY_DESC \u003d \" \" + PREFIX_COUNTRY + \"ZZ\"; // not a valid country code"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String INVALID_TIMEZONE_DESC \u003d \" \" + PREFIX_TIMEZONE + \"GT+8\"; // not a valid timezone input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final ClientEditCommand.EditClientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final ClientEditCommand.EditClientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        DESC_AMY \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCountry(VALID_COUNTRY_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withTimezone(VALID_TIMEZONE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        DESC_BOB \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withCountry(VALID_COUNTRY_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withTimezone(VALID_TIMEZONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * - the address book, filtered client list and selected client in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the client at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static void showClientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(1, model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 21,
      "qwoprocks": 13,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CountryFilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryFilterCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute_validCountries_matchesExpectedFilterResult() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        List\u003cClient\u003e initialClientList \u003d new ArrayList\u003c\u003e(model.getFilteredClientList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    country);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryFilterCommand countryFilterCommand \u003d new CountryFilterCommand(pred);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryFilterCommand.execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            List\u003cClient\u003e expectedFilteredClientList \u003d initialClientList.stream().filter(pred)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            for (Client client : model.getFilteredClientList()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                assertEquals(expectedFilteredClientList.get(i), client);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameObj_returnTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                country);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommand \u003d new CountryFilterCommand(pred);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(countryFilterCommand, countryFilterCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_notCountryFilterCommand_returnFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                country);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommand \u003d new CountryFilterCommand(pred);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Object obj \u003d new Object();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(countryFilterCommand, obj);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffPred_returnFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country countryFirst \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country countrySecond \u003d new Country(\"MY\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predFirst \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryFirst);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predSecond \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countrySecond);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommandFirst \u003d new CountryFilterCommand(predFirst);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommandSecond \u003d new CountryFilterCommand(predSecond);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(countryFilterCommandFirst, countryFilterCommandSecond);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(countryFilterCommandSecond, countryFilterCommandFirst);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_samePred_returnFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country countryFirst \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country countrySecond \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predFirst \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryFirst);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predSecond \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countrySecond);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommandFirst \u003d new CountryFilterCommand(predFirst);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommandSecond \u003d new CountryFilterCommand(predSecond);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(countryFilterCommandFirst, countryFilterCommandSecond);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(countryFilterCommandSecond, countryFilterCommandFirst);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CountryNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.NoteStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute_duplicateCountryNote_throwsCommandException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        NoteStub genericNote \u003d new NoteStub(\"generic note\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        model.addCountryNote(country, genericNote);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommand \u003d new CountryNoteCommand(country, genericNote);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e countryNoteCommand.execute(model));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute_notDuplicateCountryNote_successfullyAddsCountryNote() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            NoteStub genericNote \u003d new NoteStub(\"generic note\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(model.hasCountryNote(country, genericNote));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteCommand countryNoteCommand \u003d new CountryNoteCommand(country, genericNote);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryNoteCommand.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(model.hasCountryNote(country, genericNote));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameObj_returnTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommand \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(countryNoteCommand.equals(countryNoteCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_notCountryNoteCommand_returnFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommand \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Object obj \u003d new Object();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteCommand.equals(obj));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountryDiffNote_returnFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommandFirst \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommandSecond \u003d new CountryNoteCommand(new Country(\"MY\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic2\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteCommandFirst.equals(countryNoteCommandSecond));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteCommandSecond.equals(countryNoteCommandFirst));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountrySameNote_returnFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommandFirst \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommandSecond \u003d new CountryNoteCommand(new Country(\"MY\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteCommandFirst.equals(countryNoteCommandSecond));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteCommandSecond.equals(countryNoteCommandFirst));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountryDiffNote_returnFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommandFirst \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommandSecond \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic2\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteCommandFirst.equals(countryNoteCommandSecond));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteCommandSecond.equals(countryNoteCommandFirst));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountrySameNote_returnTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommandFirst \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteCommand countryNoteCommandSecond \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new NoteStub(\"generic\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(countryNoteCommandFirst.equals(countryNoteCommandSecond));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(countryNoteCommandSecond.equals(countryNoteCommandFirst));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class EditClientDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptorWithSameValues \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "qwoprocks": 8,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientDeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientFindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand command \u003d (ClientAddCommand) parser.parseCommand(ClientUtil.getAddCommand(client));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientAddCommand(client), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand command \u003d (ClientDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ClientDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientDeleteCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(client).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand command \u003d (ClientEditCommand) parser.parseCommand(ClientEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + ClientUtil.getEditClientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientEditCommand(INDEX_FIRST_CLIENT, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand command \u003d (ClientFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ClientFindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientFindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand command \u003d (ClientViewCommand) parser.parseCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                ClientViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(new ClientViewCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 8,
      "tankangliang": 16,
      "qwoprocks": 9,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COUNTRY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMEZONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommandParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private ClientAddCommandParser parser \u003d new ClientAddCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // multiple countries - last country accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_AMY + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // multiple timezones - last timezone accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                        + COUNTRY_DESC_BOB + TIMEZONE_DESC_AMY + TIMEZONE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client expectedClientMultipleTags \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClientMultipleTags));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                        + COUNTRY_DESC_AMY + TIMEZONE_DESC_AMY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // missing country prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + VALID_COUNTRY_BOB + TIMEZONE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // missing timezone prefix"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + VALID_TIMEZONE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + VALID_COUNTRY_BOB + VALID_TIMEZONE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // invalid country"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + INVALID_COUNTRY_DESC + TIMEZONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                Country.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // invalid timezone"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                        + COUNTRY_DESC_BOB + INVALID_TIMEZONE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                Timezone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + INVALID_COUNTRY_DESC + TIMEZONE_DESC_BOB,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "tankangliang": 75,
      "qwoprocks": 11,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * outside of the ClientDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * same path through the ClientDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private ClientDeleteCommandParser parser \u003d new ClientDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ClientDeleteCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ClientDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 8,
      "qwoprocks": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COUNTRY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMEZONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientEditCommandParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private ClientEditCommandParser parser \u003d new ClientEditCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"1\", ClientEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COUNTRY_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                Country.MESSAGE_CONSTRAINTS); // invalid country"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIMEZONE_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                Timezone.MESSAGE_CONSTRAINTS); // invalid timezone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Client} being edited,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + VALID_PHONE_AMY + INVALID_COUNTRY_DESC + VALID_TIMEZONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND + COUNTRY_DESC_AMY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withCountry(VALID_COUNTRY_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withTimezone(VALID_TIMEZONE_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withTimezone(VALID_TIMEZONE_BOB).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // country"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withCountry(VALID_COUNTRY_AMY).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // timezone"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withTimezone(VALID_TIMEZONE_AMY).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + COUNTRY_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_AMY + TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withCountry(VALID_COUNTRY_BOB).withTimezone(VALID_TIMEZONE_BOB).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_COUNTRY_DESC + COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 56,
      "qwoprocks": 26,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private ClientFindCommandParser parser \u003d new ClientFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ClientFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand expectedClientFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedClientFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedClientFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 9,
      "qwoprocks": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientNoteAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteAddCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String INDEX_STRING \u003d \"1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_STRING \u003d \"yay this be a note\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NO_INDEX_NO_NOTE \u003d \"just an empty string here\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String HAS_INDEX_NO_NOTE \u003d INDEX_STRING + \" nope no note here\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String HAS_INDEX_HAS_NOTE \u003d INDEX_STRING + \" nt/\" + NOTE_STRING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final ClientNoteAddCommandParser parser \u003d new ClientNoteAddCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_noIndexNoNote_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(NO_INDEX_NO_NOTE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_hasIndexNoNote_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(HAS_INDEX_NO_NOTE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_hasIndexHasNote_equalsExpected() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ClientNoteAddCommand expected \u003d new ClientNoteAddCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    new Note(NOTE_STRING));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ClientNoteAddCommand actual \u003d parser.parse(HAS_INDEX_HAS_NOTE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ClientViewCommandParser parser \u003d new ClientViewCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ClientViewCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                ClientViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CountryFilterCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryFilterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryFilterCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryFilterCommandParser parser \u003d new CountryFilterCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_noCountry_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_invalidCountryCode_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/ZZ\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/123\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/a b\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/c/ \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validCountryCode_returnsExpected() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryFilterCommand expected \u003d new CountryFilterCommand("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    new ClientCountryMatchesInputCountryPredicate(new Country(\"SG\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(expected, parser.parse(\" c/SG\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CountryNoteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.NoteStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryNoteCommandParser parser \u003d new CountryNoteCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_noCountryNoNote_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_hasCountryNoNote_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/SG random string\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_invalidCountryHasNote_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/Z Z nt/random string\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validCountryNoNote_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/MY \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validCountryHasNote_equalsExpected() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteCommand expected \u003d new CountryNoteCommand(new Country(\"SG\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    new NoteStub(\"random string\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(expected, parser.parse(\" c/SG nt/random string\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String INVALID_COUNTRY_CODE \u003d \"ZZ\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_TIMEZONE \u003d \"GT+8\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String VALID_COUNTRY_CODE \u003d \"SG\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_TIMEZONE \u003d \"GMT+8\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountry_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCountry((String) null));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountry_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCountry(INVALID_COUNTRY_CODE));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountry_validValueWithoutWhitespace_returnsCountry() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country expectedCountry \u003d new Country(VALID_COUNTRY_CODE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedCountry, ParserUtil.parseCountry(VALID_COUNTRY_CODE));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountry_validValueWithWhitespace_returnsTrimmedCountry() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String countryWithWhitespace \u003d WHITESPACE + VALID_COUNTRY_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country expectedCountry \u003d new Country(VALID_COUNTRY_CODE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedCountry, ParserUtil.parseCountry(countryWithWhitespace));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTimezone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTimezone((String) null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTimezone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTimezone(INVALID_TIMEZONE));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTimezone_validValueWithoutWhitespace_returnsTimezone() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Timezone expectedTimezone \u003d new Timezone(VALID_TIMEZONE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedTimezone, ParserUtil.parseTimezone(VALID_TIMEZONE));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTimezone_validValueWithWhitespace_returnsTrimmedTimezone() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String timezoneWithWhitespace \u003d WHITESPACE + VALID_TIMEZONE + WHITESPACE;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Timezone expectedTimezone \u003d new Timezone(VALID_TIMEZONE);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedTimezone, ParserUtil.parseTimezone(timezoneWithWhitespace));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 10,
      "tankangliang": 42,
      "qwoprocks": 7,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getClientList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void resetData_withDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Two clients with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newClients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasClient(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_clientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(addressBook.hasClient(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_clientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        addressBook.addClient(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(addressBook.hasClient(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_clientWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        addressBook.addClient(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(addressBook.hasClient(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getClientList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * A stub ReadOnlyAddressBook whose clients list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        AddressBookStub(Collection\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            this.clients.setAll(clients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return clients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 31,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.NoteStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_clientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_clientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManager.addClient(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addAndHasCountryNote_validCountry_updatesCorrectly() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        NoteStub genericNote \u003d new NoteStub(\"generic note\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(modelManager.hasCountryNote(country, genericNote));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.addCountryNote(country, genericNote);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(modelManager.hasCountryNote(country, genericNote));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void addAndHasClientNote_validSyntax_updatesCorrectly() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d ALICE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"this be a client note\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(modelManager.hasClientNote(client, clientNote));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.addClientNote(client, clientNote);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(modelManager.hasClientNote(client, clientNote));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withClient(ALICE).withClient(BENSON).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManager.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManager.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 13,
      "raysonkoh": 9,
      "qwoprocks": 16,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientCountryMatchesInputCountryPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ClientCountryMatchesInputCountryPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void test_matchesCountry_returnTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    country);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(pred.test(new ClientBuilder().withCountry(countryCode).build()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void test_notMatchCountry_returnFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c COUNTRY_CODES.length - 1; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(COUNTRY_CODES[i]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    country);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(pred.test(new ClientBuilder().withCountry(COUNTRY_CODES[i + 1]).build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameObj_returnTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(pred, pred);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_notClientCountryMatchesInputCountryPredicate_returnFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Object obj \u003d new Object();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(pred, obj);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountry_returnFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predFirst \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predSecond \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"MY\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(predFirst, predSecond);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(predSecond, predFirst);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountry_returnTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predFirst \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predSecond \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(predFirst, predSecond);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(predSecond, predFirst);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e client.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void isSameClient() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ALICE.isSameClient(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ALICE.isSameClient(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withCountry(VALID_COUNTRY_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withCountry(VALID_COUNTRY_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different country -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 7,
      "qwoprocks": 26,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/TimezoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TimezoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Timezone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String invalidTimezone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Timezone(invalidTimezone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // null timezone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Timezone.isValidTimezone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // invalid timezone"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"UTC+8\")); // does not start with GMT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"GM+8\")); // misspelled GMT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"GMT+15\")); // out of range (positive)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"GMT-13\")); // out of range (negative)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"GMT+654657987654456\")); // large number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // valid timezone"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(Timezone.isValidTimezone(\"GMT+8\")); // valid timezone"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(Timezone.isValidTimezone(\"GMT-12\")); // smallest negative offset"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(Timezone.isValidTimezone(\"GMT+14\")); // largest positive offset"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/UniqueClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class UniqueClientListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UniqueClientList uniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_clientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_clientInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_clientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(uniqueClientList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void add_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void add_duplicateClient_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_nullTargetClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_nullEditedClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_targetClientNotInList_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.setClient(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_editedClientIsSameClient_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClient(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_editedClientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_editedClientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClient(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_editedClientHasNonUniqueIdentity_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClient(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void remove_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void remove_clientDoesNotExist_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void remove_existingClient_removesClient() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_nullUniqueClientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((UniqueClientList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_uniqueClientList_replacesOwnListWithProvidedUniqueClientList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClients(expectedUniqueClientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((List\u003cClient\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClients(clientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_listWithDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClients(listWithDuplicateClients));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            -\u003e uniqueClientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/country/CountryManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    //TODO: Add more tests if decide to include checking for 3-letter Country Code"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isValidCode_validCode_returnTrue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(CountryManager.isValidCountryCode(countryCode));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isValidCode_invalidCode_returnFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryManager.isValidCountryCode(\"ZZ\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryManager.isValidCountryCode(\"12\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryManager.isValidCountryCode(\"az\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryManager.isValidCountryCode(\"bd\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryManager.isValidCountryCode(\"bdc\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void hasCountryNote_duplicateNote_returnTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryManager countryManager \u003d new CountryManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            NoteStub genericNote \u003d new NoteStub(\"generic note\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryManager.addCountryNote(country, genericNote);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(countryManager.hasCountryNote(country, genericNote));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void hasCountryNote_notDuplicateNote_returnFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryManager countryManager \u003d new CountryManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            NoteStub genericNote \u003d new NoteStub(\"generic note\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(countryManager.hasCountryNote(new Country(countryCode), genericNote));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote_validNote_updatesCorrectly() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryManager countryManager \u003d new CountryManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            NoteStub genericNote \u003d new NoteStub(\"generic note\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(countryManager.hasCountryNote(country, genericNote));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryManager.addCountryNote(new Country(countryCode), genericNote);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(countryManager.hasCountryNote(country, genericNote));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/country/CountryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_notACountry_returnFalse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countryFirst \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Object obj \u003d new Object();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertNotEquals(countryFirst, obj);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountry_returnFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c COUNTRY_CODES.length - 1; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countryFirst \u003d new Country(COUNTRY_CODES[i]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countrySecond \u003d new Country(COUNTRY_CODES[i + 1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertNotEquals(countryFirst, countrySecond);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertNotEquals(countrySecond, countryFirst);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountry_returnTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countryFirst \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countrySecond \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(countryFirst, countrySecond);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(countrySecond, countryFirst);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/country/NoteStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A stub of Note which is an empty class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class NoteStub extends Note {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public NoteStub(String content) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UniqueTagSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class UniqueTagSetTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UniqueTagSet uniqueTagSet \u003d new UniqueTagSet();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.contains(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_tagNotInSet_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(uniqueTagSet.contains(tag));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_tagInSet_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSet.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(uniqueTagSet.contains(tag));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addAll_nullTagSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.addAll(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addAll_tagSetWithNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.addAll(tags));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getTags_nullTagSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.getTags(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getTags_tagSetWithNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.getTags(tags));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getTags_tagSet_getCorrectUniqueTags() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Add new tags for the very first time"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag meeting \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag business \u003d new Tag(\"business\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e originalTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        originalTags.add(meeting);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        originalTags.add(business);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSet.addAll(originalTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // New set of local tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag meeting2 \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag business2 \u003d new Tag(\"business\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e localTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        localTags.add(meeting2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        localTags.add(business2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Get unique tags from the set of local tags, assert that it is equal to both original and local tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e uniqueTags \u003d uniqueTagSet.getTags(localTags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(originalTags, uniqueTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(localTags, uniqueTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Assert that unique tags are same objects as original tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Tag originalTag : originalTags) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (Tag uniqueTag : uniqueTags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                if (uniqueTag.equals(originalTag)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    assertSame(uniqueTag, originalTag);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Assert that unique tags are different objects from local tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Tag localTag : localTags) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (Tag uniqueTag : uniqueTags) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                if (uniqueTag.equals(localTag)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    assertNotSame(uniqueTag, localTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags_nullTagSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.setTags(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags_tagSetWithNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.setTags(tags));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags_tagSet_replacesOwnSetWithProvidedTagSet() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag businessTag \u003d new Tag(\"business\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag meetingTag \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(businessTag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSet.addAll(tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newTags.add(meetingTag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSet.setTags(newTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(uniqueTagSet.asUnmodifiableSet(), newTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void asUnmodifiableSet_modifySet_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueTagSet.asUnmodifiableSet().clear());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/model/widget/WidgetModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.model.widget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetModelManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setContent_sameClient_isEqual() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModel widgetModelManager1 \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModel widgetModelManager2 \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // set content with same object -\u003e widget object should be the same"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client bob \u003d new ClientBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager1.setContent(bob);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager2.setContent(bob);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(widgetModelManager1.getWidgetContent(), widgetModelManager2.getWidgetContent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // set content to different client objects but of the same fields and values -\u003e meaning same person but"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // duplicate entry"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client bob1 \u003d new ClientBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager2.setContent(bob1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(widgetModelManager1.getWidgetContent(), widgetModelManager2.getWidgetContent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setContent_diffClient_notEqual() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // diff client should not be the same."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModel widgetModelManager1 \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModel widgetModelManager2 \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client bob \u003d new ClientBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client amy \u003d new ClientBuilder(AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager1.setContent(bob);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager2.setContent(amy);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertNotEquals(widgetModelManager1.getWidgetContent(), widgetModelManager2.getWidgetContent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/widget/WidgetObjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.model.widget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetObjectTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void set_overLimit_properTruncate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject wo \u003d new WidgetObject();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        wo.set(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(wo.footer(), \"13\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void equals_sameObjectDueToTruncate_equal() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject o1 \u003d new WidgetObject();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        o1.set(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject o2 \u003d new WidgetObject();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        o2.set(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(o1, o2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void equals_differentObjectDueToLackOfFields_notEquals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject o1 \u003d new WidgetObject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        o1.set(\"1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetObject o2 \u003d new WidgetObject();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        o2.set(\"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertNotEquals(o1, o2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class JsonAdaptedClientTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_COUNTRY \u003d \"ZZ\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_TIMEZONE \u003d \"GT+8\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_COUNTRY \u003d BENSON.getCountry().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_TIMEZONE \u003d BENSON.getTimezone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_validClientDetails_returnsClient() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(BENSON, client.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void toModelType_invalidCountry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                INVALID_COUNTRY, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String expectedMessage \u003d Country.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void toModelType_nullCountry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                null, VALID_TIMEZONE, VALID_TAGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Country.class.getSimpleName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, invalidTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, client::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 1,
      "tankangliang": 38,
      "qwoprocks": 19,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void readAddressBook_invalidClientAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidClientAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void readAddressBook_invalidAndValidClientAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidClientAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        original.addClient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        original.removeClient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        original.addClient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 11,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.TypicalClients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final Path TYPICAL_CLIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalClientsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final Path INVALID_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidClientAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final Path DUPLICATE_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateClientAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_typicalClientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        AddressBook typicalClientsAddressBook \u003d TypicalClients.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(addressBookFromFile, typicalClientsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_invalidClientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_duplicateClients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_CLIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withClient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Adds a new {@code Client} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public AddressBookBuilder withClient(Client client) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String DEFAULT_COUNTRY \u003d \"SG\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String DEFAULT_TIMEZONE \u003d \"GMT+8\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Timezone timezone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates a {@code ClientBuilder} with the default details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        country \u003d new Country(DEFAULT_COUNTRY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        timezone \u003d new Timezone(DEFAULT_TIMEZONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Initializes the ClientBuilder with the data of {@code clientToCopy}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder(Client clientToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        name \u003d clientToCopy.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        phone \u003d clientToCopy.getPhone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        email \u003d clientToCopy.getEmail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        address \u003d clientToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        country \u003d clientToCopy.getCountry();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        timezone \u003d clientToCopy.getTimezone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Name} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Address} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Phone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Email} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code Country} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientBuilder withCountry(String country) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.country \u003d new Country(country);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code Timezone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientBuilder withTimezone(String timezone) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.timezone \u003d new Timezone(timezone);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Client build() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Client(name, phone, email, address, country, timezone, tags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 27,
      "qwoprocks": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A utility class for Client."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an add command string for adding the {@code client}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static String getAddCommand(Client client) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return ClientAddCommand.COMMAND_WORD + \" \" + getClientDetails(client);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the part of command string for the given {@code client}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static String getClientDetails(Client client) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        sb.append(PREFIX_COUNTRY + client.getCountry().getCountryCode() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        sb.append(PREFIX_TIMEZONE + client.getTimezone().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client.getTags().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the part of command string for the given {@code EditClientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static String getEditClientDescriptorDetails(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.getCountry().ifPresent(country -\u003e sb.append(PREFIX_COUNTRY).append(country.getCountryCode())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.getTimezone().ifPresent(timezone -\u003e sb.append(PREFIX_TIMEZONE).append(timezone.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 12,
      "qwoprocks": 13,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditClientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A utility class to help with building EditClientDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class EditClientDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private EditClientDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.descriptor \u003d new EditClientDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an {@code EditClientDescriptor} with fields containing {@code client}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder(Client client) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setName(client.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setPhone(client.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setEmail(client.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setAddress(client.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.setCountry(client.getCountry());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.setTimezone(client.getTimezone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setTags(client.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Name} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Email} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Address} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code Country} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public EditClientDescriptorBuilder withCountry(String country) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.setCountry(new Country(country));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code Timezone} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public EditClientDescriptorBuilder withTimezone(String timezone) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.setTimezone(new Timezone(timezone));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditClientDescriptor}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptor build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 21,
      "qwoprocks": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the middle index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the last index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the client in the {@code model}\u0027s client list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static Client getClient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return model.getFilteredClientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A utility class containing a list of {@code Client} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class TypicalClients {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withPhone(\"94351253\").withCountry(\"SG\").withTimezone(\"GMT+8\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withCountry(\"SG\").withTimezone(\"GMT+8\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withCountry(\"US\").withTimezone(\"GMT-4\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withCountry(\"SG\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withTimezone(\"GMT+8\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withCountry(\"GB\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withTimezone(\"GMT+1\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withCountry(\"JP\").withTimezone(\"GMT+9\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withCountry(\"US\").withTimezone(\"GMT-4\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withCountry(\"IN\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withTimezone(\"GMT+5\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withCountry(\"US\").withTimezone(\"GMT-4\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    // Manually added - Client\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCountry(VALID_COUNTRY_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withTimezone(VALID_TIMEZONE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withCountry(VALID_COUNTRY_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withTimezone(VALID_TIMEZONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private TypicalClients() {} // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical clients."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static List\u003cClient\u003e getTypicalClients() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 21,
      "qwoprocks": 20,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 3,
      "-": 9
    }
  }
]
